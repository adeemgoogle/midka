func DoRequestWithDeadline(fctx *fiber.Ctx, req string, deadline time.Duration) error {
	// Создаем контекст с дедлайном
	ctx, cancel := context.WithDeadline(fctx.Context(), time.Now().Add(deadline))
	defer cancel()

	// Создаем HTTP запрос с контекстом
	requ, _ := http.NewRequestWithContext(ctx, http.MethodGet, req, nil)

	client := &http.Client{}
	res, err := client.Do(requ)
	if err != nil {
		return fctx.Status(http.StatusInternalServerError).SendString(err.Error())
	}
	defer res.Body.Close()

	select {
	case <-time.After(500 * time.Millisecond):
		fmt.Printf("request completed=%d\n", res.StatusCode)
		return fctx.Status(res.StatusCode).SendString("Request completed")
	case <-ctx.Done():
		fmt.Println("request too long")
		return fctx.SendString("Request took too long")
	}
}


https://bytebytego.com/courses/system-design-interview/scale-from-zero-to-millions-of-users

https://sybase91.medium.com/system-design-basics-part-4-latency-throughput-and-availability-99d5e0cfaa11

https://www.linkedin.com/pulse/system-design-basics-part-i-client-server-model-thomas-varghese/

https://dataschool.com/data-modeling-101/row-vs-column-oriented-databases/

https://levelup.gitconnected.com/understanding-isolation-levels-in-a-database-transaction-af78aea3f44

https://youtu.be/-qNSXK7s7_w?si=Ld38-VOiXQJ_S8bm

https://medium.com/@waleoyediran/spatial-indexing-with-quadtrees-b998ae49336

https://bytebytego.com/courses/system-design-interview/back-of-the-envelope-estimation

https://bytebytego.com/courses/system-design-interview/a-framework-for-system-design-interviews


package handler

import (
	"context"
	"fmt"
	"net/http"
	"time"
)

package main

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gofiber/fiber/v2"
)

func DoRequest(fctx *fiber.Ctx, req string) error {
	ctx := fctx.Context() // Получаем внутренний контекст Fasthttp от Fiber
	requ, _ := http.NewRequestWithContext(ctx, http.MethodGet, req, nil)

	client := &http.Client{}
	res, err := client.Do(requ)
	if err != nil {
		return fctx.Status(http.StatusInternalServerError).SendString(err.Error())
	}
	defer res.Body.Close()

	select {
	case <-time.After(500 * time.Millisecond):
		fmt.Printf("request completed=%d\n", res.StatusCode)
		// Пример использования значения из контекста Fiber
		testValue := fctx.Locals("test")
		fmt.Println(testValue)
		return fctx.Status(res.StatusCode).SendString("Request completed")
	case <-ctx.Done():
		fmt.Println("request too long")
		return fctx.SendString("Request took too long")
	}
}

func main() {
	app := fiber.New()

	app.Get("/do_request", func(c *fiber.Ctx) error {
		// Пример установки значения в контекст Fiber
		c.Locals("test", "example value")
		return DoRequest(c, "http://example.com")
	})

	app.Listen(":3000")
}
 github.com/lithammer/shortuuid/v3@v3.0.4: unexpected EOF 
xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string"><?xml version="1.0" encoding="UTF-8" standalone="no"?>;<requestMessage xmlns="http://www.w3.org/2001/XMLSchema">;
