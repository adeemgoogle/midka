using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Quartz;
using Quartz.Impl;
using Quartz.Spi;
using StackExchange.Redis;
using Serilog;
using TradePointsLoader.Repository;
using TradePointsLoader.Service;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Serilog.Events;
using Serilog.Formatting.Compact;

class Program
{
    private static readonly IConfiguration _config = new ConfigurationBuilder()
        .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
        .AddJsonFile("appsettings.json")
        .AddEnvironmentVariables()
        .Build();

    static async Task<int> Main(string[] args)
    {
        ConfigureLogging();
        try
        {
            var host = CreateWebHostBuilder(args).Build();
            await host.RunAsync();
            return 0;
        }
        catch (Exception ex)
        {
            Log.Fatal($"Host terminated unexpectedly: {ex.Message}");
            return 1;
        }
        finally
        {
            Log.CloseAndFlush();
        }
    }

    static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
        new WebHostBuilder()
            .UseKestrel()
            .UseUrls("http://*:8080")
            .UseConfiguration(_config)
            .ConfigureServices(ConfigureServices)
            .UseStartup<Startup>();

    static void ConfigureServices(IServiceCollection services)
    {
        services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);
        services.AddLogging();
        services.AddHealthChecks();
        services.AddSingleton<HealthzController>();

        // Register services
        services.AddSingleton<PostgresService>();
        services.AddSingleton<KATORepository>();
        services.AddSingleton(provider =>
        {
            var katoRepository = provider.GetRequiredService<KATORepository>();
            return katoRepository.GetKATORef();
        });
        services.AddSingleton<TradePointsRepository>();

        // Register and start SlaveService as a hosted service
        services.AddSingleton<SlaveService>();
        services.AddHostedService<SlaveHostedService>();

        // Quartz services
        services.AddSingleton<IJobFactory, SingletonJobFactory>();
        services.AddSingleton<ISchedulerFactory, StdSchedulerFactory>();
        services.AddSingleton<MyJob>();
        services.AddSingleton(new JobSchedule(
            jobType: typeof(MyJob),
            cronExpression: "0 0 * * * ?")); // Run every hour
        services.AddHostedService<QuartzHostedService>();

        // Redis
        services.AddSingleton<IConnectionMultiplexer>(provider =>
        {
            var connectionString = _config.GetConnectionString("RedisConnection");
            return ConnectionMultiplexer.Connect(connectionString);
        });
    }

    static void ConfigureLogging()
    {
        Log.Logger = new LoggerConfiguration()
            .WriteTo.Console(restrictedToMinimumLevel: LogEventLevel.Debug, formatter: new RenderedCompactJsonFormatter())
            .CreateLogger();
    }

    public class SlaveService
    {
        private readonly IConnectionMultiplexer _redis;
        private readonly string _serviceName;
        private readonly int _db;

        public SlaveService(IConnectionMultiplexer redis, IConfiguration config)
        {
            _redis = redis;
            _serviceName = config["Redis:ServiceName"];
            _db = int.Parse(config["Redis:Database"]);
            Log.Information($"Service Name: {_serviceName}, Database: {_db}");
        }

        public async Task CheckAsync(CancellationToken cancellationToken)
        {
            while (!cancellationToken.IsCancellationRequested)
            {
                if (IsMasterDead())
                {
                    Log.Information("One pod is dead!");
                    await BecomeMasterAsync(cancellationToken);
                    return;
                }
                await Task.Delay(30 * 1000, cancellationToken); // 30 seconds delay
            }
        }

        private bool IsMasterDead()
        {
            var db = _redis.GetDatabase(_db);
            var res = db.StringGet(_serviceName);
            return res.IsNullOrEmpty;
        }

        private async Task BecomeMasterAsync(CancellationToken cancellationToken)
        {
            while (!cancellationToken.IsCancellationRequested)
            {
                Log.Information("Trying to become master");
                await UpdateStatusAsync(cancellationToken);
                await Task.Delay(10 * 1000, cancellationToken); // 10 seconds delay
            }
        }

        private async Task UpdateStatusAsync(CancellationToken cancellationToken)
        {
            var db = _redis.GetDatabase(_db);
            var id = Guid.NewGuid().ToString();
            await db.StringSetAsync(_serviceName, id, TimeSpan.FromSeconds(30));
        }
    }

    public class SlaveHostedService : IHostedService
    {
        private readonly IServiceProvider _serviceProvider;
        private SlaveService _slaveService;

        public SlaveHostedService(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        public Task StartAsync(CancellationToken cancellationToken)
        {
            _slaveService = _serviceProvider.GetService<SlaveService>();
            return _slaveService.CheckAsync(cancellationToken);
        }

        public Task StopAsync(CancellationToken cancellationToken)
        {
            return Task.CompletedTask;
        }
    }

    public class MyJob : IJob
    {
        private readonly IConfiguration _config;

        public MyJob(IConfiguration config)
        {
            _config = config;
        }

        public async Task Execute(IJobExecutionContext context)
        {
            Log.Information("My job is started");
            try
            {
                var dbConnector = new PostgresService(_config);
                var connection = dbConnector.ConnectToDB();

                Log.Information("Loading trade points data");

                KATORepository katoRep = new KATORepository(_config);
                var katodict = katoRep.GetKATORef();

                TradePointsRepository tradePointsRep = new TradePointsRepository(_config, katodict);
                var aTMs = tradePointsRep.GetAtms();
                var branches = tradePointsRep.GetBranches();

                dbConnector.TruncateAtmworktime();
                dbConnector.TruncateBRanchworktime();
                dbConnector.TruncateBRanch();
                dbConnector.TruncateATMS();
                dbConnector.TruncateKato();

                dbConnector.AddKATO(katodict);
                dbConnector.AddBranches(branches);
                dbConnector.AddATMs(aTMs);
                dbConnector.AddBranchs(branches);
                dbConnector.AddAtms(aTMs);

                Log.Information("Process finished and cron job executed.");
            }
            catch (Exception ex)
            {
                Log.Error($"Error in job execution: {ex.Message}");
            }
        }
    }

    public class SingletonJobFactory : IJobFactory
    {
        private readonly IServiceProvider _serviceProvider;

        public SingletonJobFactory(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        public IJob NewJob(TriggerFiredBundle bundle, IScheduler scheduler)
        {
            return _serviceProvider.GetService(bundle.JobDetail.JobType) as IJob;
        }

        public void ReturnJob(IJob job) { }
    }

    public class QuartzHostedService : IHostedService
    {
        private readonly ISchedulerFactory _schedulerFactory;
        private readonly IJobFactory _jobFactory;
        private readonly IEnumerable<JobSchedule> _jobSchedules;
        private readonly IConnectionMultiplexer _redis;
        private readonly IConfiguration _config;
        private IScheduler _scheduler;

        public QuartzHostedService(
            ISchedulerFactory schedulerFactory,
            IJobFactory jobFactory, 
            IEnumerable<JobSchedule> jobSchedules,
            IConnectionMultiplexer redis,
            IConfiguration config)
        {
            _schedulerFactory = schedulerFactory;
            _jobFactory = jobFactory;
            _jobSchedules = jobSchedules;
            _redis = redis;
            _config = config;
        }

        public async Task StartAsync(CancellationToken cancellationToken)
        {
            Log.Information("QuartzHostedService is starting.");
            _scheduler = await _schedulerFactory.GetScheduler(cancellationToken);
            _scheduler.JobFactory = _jobFactory;

            if (await IsMasterNode())
            {
                foreach (var jobSchedule in _jobSchedules)
                {
                    var job = CreateJob(jobSchedule);
                    var trigger = CreateTrigger(jobSchedule);

                    await _scheduler.ScheduleJob(job, trigger, cancellationToken);
                    Log.Information($"Scheduled job: {jobSchedule.JobType.FullName} with cron expression {jobSchedule.CronExpression}");
                }

                await _scheduler.Start(cancellationToken);
                Log.Information("QuartzHostedService started.");
            }
            else
            {
                Log.Information("This node is not the master. Quartz jobs will not be started.");
            }
        }

        public async Task StopAsync(CancellationToken cancellationToken)
        {
            Log.Information("QuartzHostedService is stopping.");
            if (_scheduler != null)
            {
                await _scheduler.Shutdown(cancellationToken);
                Log.Information("QuartzHostedService stopped.");
            }
        }

        private async Task<bool> IsMasterNode()
        {
            var db = _redis.GetDatabase(int.Parse(_config["Redis:Database"]));
            var res = await db.StringGetAsync(_config["Redis:ServiceName"]);
            return !res.IsNullOrEmpty;
        }

        private IJobDetail CreateJob(JobSchedule schedule)
        {
            var jobType = schedule.JobType;
            Log.Information($"Creating job: {jobType.FullName}");
            return JobBuilder.Create(jobType)
                             .WithIdentity(jobType.FullName)
                             .WithDescription(jobType.Name)
                             .Build();
        }

        private ITrigger CreateTrigger(JobSchedule schedule)
        {
            Log.Information($"Creating trigger for job: {schedule.JobType.FullName} with cron expression {schedule.CronExpression}");
            return TriggerBuilder.Create()
                                 .WithIdentity($"{schedule.JobType.FullName}.trigger")
                                 .WithCronSchedule(schedule.CronExpression)
                                 .WithDescription(schedule.CronExpression)
                                 .Build();
        }
    }

    public class JobSchedule
    {
        public JobSchedule(Type jobType, string cronExpression)
        {
            JobType = jobType;
            CronExpression = cronExpression;
        }

        public Type JobType { get; }
        public string CronExpression { get; }
    }
}
```

### Объяснение изменений:

1. **SlaveService**:
   - Отвечает за проверку состояния мастера и может стать мастером, если текущий мастер недоступен.

2. **SlaveHostedService**:
   - Запускает `SlaveService` как фоновую службу.

3. **QuartzHostedService**:
   - Проверяет, является ли текущий под мастером (`IsMasterNode`). Если да, запускает `Quartz`-джобы.

4. **ConfigureServices**:
   - Регистрация `SlaveHostedService` и `QuartzHostedService`.

Теперь `SlaveService` отвечает за проверку состояния подов, и только один под будет мастером и запускать `Quartz`-джобы.



class Program
{
    private static readonly IConfiguration _config = new ConfigurationBuilder()
        .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
        .AddJsonFile

("appsettings.json")
        .AddEnvironmentVariables()
        .Build();

    static async Task<int> Main(string[] args)
    {
        ConfigureLogging();
        try
        {
            var host = CreateWebHostBuilder(args).Build();
            await host.RunAsync();
            return 0;
        }
        catch (Exception ex)
        {
            Log.Fatal($"Host terminated unexpectedly: {ex.Message}");
            return 1;
        }
        finally
        {
            Log.CloseAndFlush();
        }
    }

    static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
        new WebHostBuilder()
            .UseKestrel()
            .UseUrls("http://*:8080")
            .UseConfiguration(_config)
            .ConfigureServices(ConfigureServices)
            .UseStartup<Startup>();

    static void ConfigureServices(IServiceCollection services)
    {
        services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);
        services.AddLogging();
        services.AddHealthChecks();
        services.AddSingleton<HealthzController>();

        // Register services
        services.AddSingleton<PostgresService>();
        services.AddSingleton<KATORepository>();
        services.AddSingleton(provider =>
        {
            var katoRepository = provider.GetRequiredService<KATORepository>();
            return katoRepository.GetKATORef();
        });
        services.AddSingleton<TradePointsRepository>();

        // Register and start SlaveService as a hosted service
        services.AddSingleton<SlaveService>();
        services.AddHostedService<SlaveHostedService>();

        // Quartz services
        services.AddSingleton<IJobFactory, SingletonJobFactory>();
        services.AddSingleton<ISchedulerFactory, StdSchedulerFactory>();
        services.AddSingleton<MyJob>();
        services.AddSingleton(new JobSchedule(
            jobType: typeof(MyJob),
            cronExpression: "0 0 * * * ?")); // Run every hour
        services.AddHostedService<QuartzHostedService>();

        // Redis
        services.AddSingleton<IConnectionMultiplexer>(provider =>
        {
            var connectionString = _config.GetConnectionString("RedisConnection");
            return ConnectionMultiplexer.Connect(connectionString);
        });
    }

    static void ConfigureLogging()
    {
        Log.Logger = new LoggerConfiguration()
            .WriteTo.Console(restrictedToMinimumLevel: LogEventLevel.Debug, formatter: new RenderedCompactJsonFormatter())
            .CreateLogger();
    }

    public class SlaveService
    {
        private readonly IConnectionMultiplexer _redis;
        private readonly string _serviceName;
        private readonly int _db;

        public SlaveService(IConnectionMultiplexer redis, IConfiguration config)
        {
            _redis = redis;
            _serviceName = config["Redis:ServiceName"];
            _db = int.Parse(config["Redis:Database"]);
            Log.Information($"Service Name: {_serviceName}, Database: {_db}");
        }

        public async Task CheckAsync(CancellationToken cancellationToken)
        {
            while (!cancellationToken.IsCancellationRequested)
            {
                if (IsMasterDead())
                {
                    Log.Information("One pod is dead!");
                    await BecomeMasterAsync(cancellationToken);
                    return;
                }
                await Task.Delay(30 * 1000, cancellationToken); // 30 seconds delay
            }
        }

        private bool IsMasterDead()
        {
            var db = _redis.GetDatabase(_db);
            var res = db.StringGet(_serviceName);
            return res.IsNullOrEmpty;
        }

        private async Task BecomeMasterAsync(CancellationToken cancellationToken)
        {
            while (!cancellationToken.IsCancellationRequested)
            {
                Log.Information("Trying to become master");
                await UpdateStatusAsync(cancellationToken);
                await Task.Delay(10 * 1000, cancellationToken); // 10 seconds delay
            }
        }

        private async Task UpdateStatusAsync(CancellationToken cancellationToken)
        {
            var db = _redis.GetDatabase(_db);
            var id = Guid.NewGuid().ToString();
            await db.StringSetAsync(_serviceName, id, TimeSpan.FromSeconds(30));
        }
    }

    public class SlaveHostedService : IHostedService
    {
        private readonly IServiceProvider _serviceProvider;
        private SlaveService _slaveService;

        public SlaveHostedService(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        public Task StartAsync(CancellationToken cancellationToken)
        {
            _slaveService = _serviceProvider.GetService<SlaveService>();
            return _slaveService.CheckAsync(cancellationToken);
        }

        public Task StopAsync(CancellationToken cancellationToken)
        {
            return Task.CompletedTask;
        }
    }

    public class MyJob : IJob
    {
        private readonly SlaveService _slaveService;
        private readonly IConfiguration _config;

        public MyJob(SlaveService slaveService, IConfiguration config)
        {
            _slaveService = slaveService;
            _config = config;
        }

        public async Task Execute(IJobExecutionContext context)
        {
            Log.Information("My job is started");
            await _slaveService.CheckAsync(context.CancellationToken);
            try
            {
                var dbConnector = new PostgresService(_config);
                var connection = dbConnector.ConnectToDB();

                Log.Information("Loading trade points data");

                KATORepository katoRep = new KATORepository(_config);
                var katodict = katoRep.GetKATORef();

                TradePointsRepository tradePointsRep = new TradePointsRepository(_config, katodict);
                var aTMs = tradePointsRep.GetAtms();
                var branches = tradePointsRep.GetBranches();

                dbConnector.TruncateAtmworktime();
                dbConnector.TruncateBRanchworktime();
                dbConnector.TruncateBRanch();
                dbConnector.TruncateATMS();
                dbConnector.TruncateKato();

                dbConnector.AddKATO(katodict);
                dbConnector.AddBranches(branches);
                dbConnector.AddATMs(aTMs);
                dbConnector.AddBranchs(branches);
                dbConnector.AddAtms(aTMs);

                Log.Information("Process finished and cron job executed.");
            }
            catch (Exception ex)
            {
                Log.Error($"Error in job execution: {ex.Message}");
            }
        }
    }

    public class SingletonJobFactory : IJobFactory
    {
        private readonly IServiceProvider _serviceProvider;

        public SingletonJobFactory(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        public IJob NewJob(TriggerFiredBundle bundle, IScheduler scheduler)
        {
            return _serviceProvider.GetService(bundle.JobDetail.JobType) as IJob;
        }

        public void ReturnJob(IJob job) { }
    }

    public class QuartzHostedService : IHostedService
    {
        private readonly ISchedulerFactory _schedulerFactory;
        private readonly IJobFactory _jobFactory;
        private readonly IEnumerable<JobSchedule> _jobSchedules;
        private readonly IConnectionMultiplexer _redis;
        private readonly IConfiguration _config;
        private IScheduler _scheduler;

        public QuartzHostedService(
            ISchedulerFactory schedulerFactory,
            IJobFactory jobFactory, 
            IEnumerable<JobSchedule> jobSchedules,
            IConnectionMultiplexer redis,
            IConfiguration config)
        {
            _schedulerFactory = schedulerFactory;
            _jobFactory = jobFactory;
            _jobSchedules = jobSchedules;
            _redis = redis;
            _config = config;
        }

        public async Task StartAsync(CancellationToken cancellationToken)
        {
            Log.Information("QuartzHostedService is starting.");
            _scheduler = await _schedulerFactory.GetScheduler(cancellationToken);
            _scheduler.JobFactory = _jobFactory;

            if (await IsMasterNode())
            {
                foreach (var jobSchedule in _jobSchedules)
                {
                    var job = CreateJob(jobSchedule);
                    var trigger = CreateTrigger(jobSchedule);

                    await _scheduler.ScheduleJob(job, trigger, cancellationToken);
                    Log.Information($"Scheduled job: {jobSchedule.JobType.FullName} with cron expression {jobSchedule.CronExpression}");
                }

                await _scheduler.Start(cancellationToken);
                Log.Information("QuartzHostedService started.");
            }
            else
            {
                Log.Information("This node is not the master. Quartz jobs will not be started.");
            }
        }

        public async Task StopAsync(CancellationToken cancellationToken)
        {
            Log.Information("QuartzHostedService is stopping.");
            if (_scheduler != null)
            {
                await _scheduler.Shutdown(cancellationToken);
                Log.Information("QuartzHostedService stopped.");
            }
        }

        private async Task<bool> IsMasterNode()
        {
            var db = _redis.GetDatabase(int.Parse(_config["Redis:Database"]));
            var res = await db.StringGetAsync(_config["Redis:ServiceName"]);
            return !res.IsNullOrEmpty;
        }

        private IJobDetail CreateJob(JobSchedule schedule)
        {
            var jobType = schedule.JobType;
            Log.Information($"Creating job: {


private ITrigger CreateTrigger(JobSchedule schedule)
    {
        Log.Information($"Creating trigger for job: {schedule.JobType.FullName} with cron expression {schedule.CronExpression}");
        return TriggerBuilder.Create()
                             .WithIdentity($"{schedule.JobType.FullName}.trigger")
                             .WithCronSchedule(schedule.CronExpression)
                             .WithDescription(schedule.CronExpression)
                             .Build();
    }
}

public class JobSchedule
{
    public JobSchedule(Type jobType, string cronExpression)
    {
        JobType = jobType;
        CronExpression = cronExpression;
    }

    public Type JobType { get; }
    public string CronExpression { get; }
} 
