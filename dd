WITH RECURSIVE Ats AS (

    SELECT
        d_ats_types.id AS ats_type_id,
           s_ats.id AS ats_id,
           s_ats.parent_id,
           s_buildings.id AS building_id,
           (select s_ats.name_kz from s_ats where d_ats_type_id='10'),
           (select s_ats.name_ru from s_ats where d_ats_type_id='10'),
            (Select d_ats_types.value_kz from d_ats_types where id='10'),
            (Select d_ats_types.value_ru from d_ats_types where id='10'),
            (select s_ats.name_kz from s_ats where s_ats.parent_id='10'),
           d_ats_types.value_ru AS ats_valueru,
           d_ats_types.value_kz,
           s_ats.name_ru as s_ats_nameRU,
           s_ats.name_kz as s_ats_nameKZ,
           s_geonims.name_kz As Geonim_kz,
           s_geonims.name_ru As Geonim_ru,
           d_geonims_types.value_ru As GeonimRU,
           d_geonims_types.value_kz As GeonimKZ,
           s_buildings.number as building_number,
           d_buildings_pointers.value_ru As building_pointerru,
           d_buildings_pointers.value_kz as building_pointerkz

    from s_ats
    left join s_geonims on s_ats.id = s_geonims.s_ats_id
        left join s_buildings on s_geonims.id = s_buildings.s_geonim_id
        left join d_ats_types on s_ats.d_ats_type_id = d_ats_types.id
        left join d_geonims_types on s_geonims.d_geonims_type_id = d_geonims_types.id
        left join d_buildings_pointers on s_buildings.d_buildings_pointer_id = d_buildings_pointers.id

        union all
        SELECT

            d_ats_types.id,
               s_ats.id,
               s_ats.parent_id,
               s_buildings.id,
               (select s_ats.name_kz from s_ats where d_ats_type_id='10'),
               (select s_ats.name_ru from s_ats where d_ats_type_id='10'),
               (Select d_ats_types.value_kz from d_ats_types where id='10'),
               (Select d_ats_types.value_ru from d_ats_types where id='10'),
            (select s_ats.name_kz from s_ats where s_ats.parent_id='10'),
               s_ats.name_ru, s_ats.name_kz,d_ats_types.value_ru , d_ats_types.value_kz, s_geonims.name_kz,
               s_geonims.name_ru, d_geonims_types.value_ru,d_geonims_types.value_kz,
               s_buildings.number,
               d_buildings_pointers.value_ru,d_buildings_pointers.value_kz
        from Ats
        Join s_ats on s_ats.id = Ats.parent_id
        left join s_geonims on s_ats.id = s_geonims.s_ats_id
        left join s_buildings on s_geonims.id = s_buildings.s_geonim_id
        left join d_ats_types on s_ats.d_ats_type_id = d_ats_types.id
        left join d_geonims_types on s_geonims.d_geonims_type_id = d_geonims_types.id
        left join d_buildings_pointers on s_buildings.d_buildings_pointer_id = d_buildings_pointers.id
        where s_ats.parent_id is not null AND s_ats.d_ats_type_id=s_ats.id
)

select * from Ats ;

WITH RECURSIVE LocationHierarchy AS (
    SELECT
        s_ats.id AS location_id,
        s_ats.parent_id,
        d_ats_types.id AS ats_type_id,
        d_ats_types.value_ru AS ats_value_ru,
        d_ats_types.value_kz AS ats_value_kz,
        s_ats.name_ru AS s_ats_name_ru,
        s_ats.name_kz AS s_ats_name_kz,
        1 AS level
    FROM s_ats
    JOIN d_ats_types ON s_ats.d_ats_type_id = d_ats_types.id
    WHERE s_ats.d_ats_type_id = '10' -- Задайте ваш нужный d_ats_type_id

    UNION ALL

    SELECT
        s_ats.id,
        s_ats.parent_id,
        d_ats_types.id,
        d_ats_types.value_ru,
        d_ats_types.value_kz,
        s_ats.name_ru,
        s_ats.name_kz,
        lh.level + 1
    FROM LocationHierarchy lh
    JOIN s_ats ON lh.location_id = s_ats.parent_id
    JOIN d_ats_types ON s_ats.d_ats_type_id = d_ats_types.id
)

SELECT
    location_id,
    MAX(CASE WHEN ats_type_id = '10' THEN ats_value_ru END) AS country,
    MAX(CASE WHEN level = 2 THEN ats_value_ru END) AS region,
    MAX(CASE WHEN level = 3 THEN ats_value_ru END) AS district,
    MAX(CASE WHEN level = 4 THEN ats_value_ru END) AS city
FROM LocationHierarchy
GROUP BY location_id
ORDER BY location_id;
