
func TestGetBonusHistoryWithAttack(t *testing.T) {
	Init()
	successExchangeRate := &model2.BonusHistoryResp{
		MerchantId: "abr",
		Transactions: []model2.Transaction{
			{
				Type:        "cashback<a onblur=\"alert(secret)\"",
				TimeStamp:   "2024-01-17T06:17:42Z",
				Amount:      "-2225",
				Description: "Coco Dark Kitchen Жарокова",
			},
		},
	}

	failedExchangeRate := &model2.BonusHistoryResp{
		MerchantId: "abr",
		Transactions: []model2.Transaction{
			{
				Type:        "cashback<a onblur=\"alert(secret)\"",
				TimeStamp:   "2024-01-17T06:17:42Z",
				Amount:      "-2225",
				Description: "Coco Dark Kitchen Жарокова",
			},
		},
	}

	GetHistory(successExchangeRate)

	t.Log(failedExchangeRate.Transactions[0].Type)

	GetHistory(successExchangeRate)

	t.Log(failedExchangeRate.Transactions[0].Type)

}

func GetHistory(s *model.BonusHistoryResp) {
	//var merchants []*model.Transaction
	s.PhoneNumber = sanitizeString(s.PhoneNumber)
	s.MerchantId = sanitizeString(s.MerchantId)
	s.ErrorCode = sanitizeString(s.ErrorCode)
	s.ErrorDescription = sanitizeString(s.ErrorDescription)
	s.DataFrom = sanitizeString(s.DataFrom)
	s.DataTo = sanitizeString(s.DataTo)
	for i := range s.Transactions {
		s.Transactions[i].Description = sanitizeString(s.Transactions[i].Description)
		s.Transactions[i].TimeStamp = sanitizeString(s.Transactions[i].TimeStamp)
		s.Transactions[i].Type = sanitizeString(s.Transactions[i].Type)
		s.Transactions[i].Amount = sanitizeString(s.Transactions[i].Amount)
	}
}
