import (
	"testing"
	"time"
	"github.com/stretchr/testify/mock"
)

// MockService - мок для сервиса
type MockService struct {
	mock.Mock
}

// isValidC - замоканная версия функции isValidC
func (m *MockService) isValidC(cards []*models.Response) bool {
	args := m.Called(cards)
	return args.Bool(0)
}

func TestService_IsValidC(t *testing.T) {
	mockService := new(MockService) // Создаем мок сервиса

	t.Run("ValidResponse", func(t *testing.T) {
		response := []*models.Response{
			&models.Response{
				IsReady:      "Y",
				ContrStatus:  "00;C OK",
				CExpired:     "2202", // Допустимая дата в формате YYMM
			},
		}
		mockService.On("isValidC", response).Return(true) // Устанавливаем ожидаемое поведение мока
		actual := mockService.isValidC(response)
		expected := true
		if actual != expected {
			t.Errorf("Expected %v but got %v", expected, actual)
		}
	})

	t.Run("InvalidResponse", func(t *testing.T) {
		response := []*models.Response{
			&models.Response{
				IsReady:      "N", // Не готовая карта
				ContrStatus:  "00;C OK",
				CExpired:     "2202",
			},
		}
		mockService.On("isValidC", response).Return(false) // Устанавливаем ожидаемое поведение мока
		actual := mockService.isValidC(response)
		expected := false
		if actual != expected {
			t.Errorf("Expected %v but got %v", expected, actual)
		}
	})
	// Добавьте другие тестовые случаи по необходимости
}


import (
	"testing"
	"time"
	"github.com/your-package/models" // Подставьте правильный путь к вашему пакету models
)

func TestIsValidC(t *testing.T) {
	service := &Service{} // Создаем экземпляр сервиса для тестирования

	// Создаем тестовые данные
	testCases := []struct {
		name          string
		inputResponse []*models.Response
		expected      bool
	}{
		{
			name: "ValidResponse",
			inputResponse: []*models.Response{
				&models.Response{
					IsReady:      "Y",
					ContrStatus:  "00;C OK",
					CExpired:     "2202", // Дата в формате YYMM (допустимая дата)
				},
			},
			expected: true,
		},
		{
			name: "InvalidResponse",
			inputResponse: []*models.Response{
				&models.Response{
					IsReady:      "N", // Не готовая карта
					ContrStatus:  "00;C OK",
					CExpired:     "2202",
				},
			},
			expected: false,
		},
		// Добавьте другие тестовые случаи по необходимости
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			actual := service.isValidC(tc.inputResponse)
			if actual != tc.expected {
				t.Errorf("Expected %v but got %v", tc.expected, actual)
			}
		})
	}
}

func (s *Service) isValidC(cards []*models.Response) bool {
	var isValid bool
	for _, card := range cards {
		if card.IsReady != "Y" {
			continue
		}

		if card.ContrStatus != "00;C OK" {
			continue
		}

		crExpired, err := strconv.Atoi(c.CExpired)
		if err != nil {
			continue
		}
		year := 2000 + crExpired/100
		month := crExpired % 100

		yearNow := time.Now().Year()
		monthNow := int(time.Now().Month())
		if year < yearNow {
			continue
		}

		if year == yearNow && month < monthNow {
			continue
		}

		isValid = true
		return isValid
	}

	return isValid
}
