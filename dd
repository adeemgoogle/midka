using System;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Serilog;

class Program
{
    private static readonly IConfiguration _config = new ConfigurationBuilder()
        .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
        .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)  // Основной файл конфигурации
        .AddJsonFile($"appsettings.{GetEnvironment()}.json", optional: true, reloadOnChange: true)  // Окружение
        .AddEnvironmentVariables()
        .Build();

    static async Task<int> Main(string[] args)
    {
        ConfigureLogging();
        try
        {
            var host = CreateWebHostBuilder(args).Build();
            await host.RunAsync();
            return 0;
        }
        catch (Exception ex)
        {
            Log.Fatal($"Host terminated unexpectedly: {ex.Message}");
            return 1;
        }
        finally
        {
            Log.CloseAndFlush();
        }
    }

    private static string GetEnvironment()
    {
        // Получаем текущее окружение из переменной среды ASPNETCORE_ENVIRONMENT.
        // По умолчанию, если не указано, используется "Production".
        return Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Production";
    }

    private static void ConfigureLogging()
    {
        Log.Logger = new LoggerConfiguration()
            .ReadFrom.Configuration(_config)
            .CreateLogger();
    }

    public static IHostBuilder CreateWebHostBuilder(string[] args) =>
        Host.CreateDefaultBuilder(args)
            .ConfigureWebHostDefaults(webBuilder =>
            {
                webBuilder.UseStartup<Startup>();
            });
}
