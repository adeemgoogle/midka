{
    public class Startup
    {
        private readonly IConfiguration Configuration;

        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        /// <summary>
        /// This method gets called by the runtime. Use this method to add services to the container.
        /// For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        /// </summary>
        /// <param name="services"></param>
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddMvc();
            services.AddOptions();
            services.Configure<ElasticConnectionSettings>(Configuration.GetSection("ElasticConnectionSettings"));
            services.AddTransient<IRepository, ElasticRepository>();
            services.AddScoped<TPQuery>();
            services.AddScoped<IDocumentExecuter, DocumentExecuter>();
            services.AddTransient<ATMType>();
            services.AddTransient<BranchType>();
            services.AddTransient<KATOType>();
            services.AddTransient<LocationType>();
            services.AddTransient<WorkTimeType>();
            services.AddTransient<AddressType>();
            services.AddTransient<IntLanguageType>();
            services.AddTransient<CircleInputType>(); 
			services.AddHealthChecks();
            services.AddSingleton(typeof(ElasticClientProvider));
            var sp = services.BuildServiceProvider();
            services.AddSingleton<ISchema>(new TradePointsSchema(new FuncDependencyResolver(type => sp.GetService(type))));

        }
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory logger)
        {
            logger.AddSerilog();

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseMetricServer();
            app.UseGraphiQl();
            app.UseMvc();
        }
    }
}
