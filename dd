git clone openssl/3.1.2: error:0a000152:ssl routines::unsafe legacy renegotiation disabled 
 log/slog: package log/slog is not in GOROOT 
 module declares its path as: github.com/IBM/sarama
                but was required as: github.com/Shopify/sarama
go: github.com/gofiber/fiber/v2: GOPROXY list is not the empty string, but contains no entries
go: go: module golang.org/toolchain: Get "https://go.dev/dl/mod/golang.org/toolchain/@v/list": tls: server chose an unconfigured cipher suite
go: malformed module path "get": missing dot in first path element
go: github.com/gofiber/fiber/v2@v2.51.0: verifying module: missing GOSUMDB
go: malformed module path "get": missing dot in first path element



https://bytebytego.com/courses/system-design-interview/scale-from-zero-to-millions-of-users

https://sybase91.medium.com/system-design-basics-part-4-latency-throughput-and-availability-99d5e0cfaa11

https://www.linkedin.com/pulse/system-design-basics-part-i-client-server-model-thomas-varghese/

https://dataschool.com/data-modeling-101/row-vs-column-oriented-databases/

https://levelup.gitconnected.com/understanding-isolation-levels-in-a-database-transaction-af78aea3f44

https://youtu.be/-qNSXK7s7_w?si=Ld38-VOiXQJ_S8bm

https://medium.com/@waleoyediran/spatial-indexing-with-quadtrees-b998ae49336

https://bytebytego.com/courses/system-design-interview/back-of-the-envelope-estimation

https://bytebytego.com/courses/system-design-interview/a-framework-for-system-design-interviews


package handler

import (
	"context"
	"fmt"
	"net/http"
	"time"
)

package main

import (
	"context"
	"context/handler"
	"time"
)

func main() {
	duration := 2 * time.Second
	ctx := context.Background()
	d := time.Now().Add(duration)
	ctx = context.WithValue(ctx, "test", "google")
	ctx, cancel := context.WithDeadline(ctx, d)

	defer cancel()

	handler.DoRequest(ctx, "https://www.google.kz/?hl=ru")
}


func DoRequest(ctx context.Context, req string) {
	requ, _ := http.NewRequest(http.MethodGet, req, nil)
	requ = requ.WithContext(ctx)

	client := &http.Client{}
	res, err := client.Do(requ)
	if err != nil {
		panic(err)
	}

	select {
	case <-time.After(500 * time.Millisecond):
		fmt.Printf("resquest complited=%d\n", res.StatusCode)
		fmt.Println(ctx.Value("test"))
	case <-ctx.Done():
		fmt.Println("request too long")

	}
}
