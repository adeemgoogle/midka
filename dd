package repository

import (
	"strconv"
	"time"

	"github.com/myproject/internal/domain"
)

// LoanRepository handles business logic
type LoanRepository struct{}

// NewLoanRepository creates a new instance
func NewLoanRepository() *LoanRepository {
	return &LoanRepository{}
}

// CalculateTotalSums calculates and returns all totals
func (r *LoanRepository) CalculateTotalSums(schedule domain.Schedule) (float64, float64, float64, float64, float64, float64, float64) {
	var allsumTotal, raschetTotal, debtTotal, sumSubsTotal, sumCliTotal, creditTotal, odPcnTotal float64

	for _, p := range schedule.Payment {
		allsumTotal += parseFloat(p.AllSum)
		raschetTotal += parseFloat(p.Raschet)
		debtTotal += parseFloat(p.Debt)
		sumSubsTotal += parseFloat(p.SumSubs)
		sumCliTotal += parseFloat(p.SumCli)
		creditTotal += parseFloat(p.Credit)
		odPcnTotal += parseFloat(p.OdPcn)
	}

	return allsumTotal, raschetTotal, debtTotal, sumSubsTotal, sumCliTotal, creditTotal, odPcnTotal
}

// FormatDate formats contract date
func (r *LoanRepository) FormatDate(dateStr string) string {
	parsedDate, _ := time.Parse("2006-01-02", dateStr)
	return parsedDate.Format("02-01-2006")
}

// parseFloat safely converts string to float64
func parseFloat(value string) float64 {
	if value == "" {
		return 0
	}
	num, _ := strconv.ParseFloat(value, 64)
	return num
}


package usecase

import (
	"github.com/myproject/internal/domain"
	"github.com/myproject/internal/repository"
)

// LoanUsecase defines the business logic
type LoanUsecase struct {
	repo *repository.LoanRepository
}

// NewLoanUsecase initializes use case
func NewLoanUsecase(repo *repository.LoanRepository) *LoanUsecase {
	return &LoanUsecase{repo: repo}
}

// ProcessLoanRequest processes incoming data
func (u *LoanUsecase) ProcessLoanRequest(req domain.LoanRequest) map[string]interface{} {
	// Calculate total sums
	allsumTotal, raschetTotal, debtTotal, sumSubsTotal, sumCliTotal, creditTotal, odPcnTotal := u.repo.CalculateTotalSums(req.UpdDayResult.Response.Main.Schedule)

	// Format date
	newToDate := u.repo.FormatDate(req.Contract.FromDate)
	myDate := u.repo.FormatDate(time.Now().Format("2006-01-02"))

	clientFullName := req.BusinessKey
	if req.SubProcess.Model.FromBcc {
		clientFullName = req.SubProcess.Model.Client.FullName
	}

	// Response struct
	return map[string]interface{}{
		"LoanCode":     req.Contract.Code,
		"LoanFromDate": newToDate,
		"CurrentDate":  myDate,
		"DepAddress":   req.Contract.BnkAddr1 + " " + req.Contract.BnkAddr2,
		"CliAddress":   req.Contract.Addr1 + " " + req.Contract.Addr2,
		"CliPhone":     req.Contract.Tel,
		"OperationFee": req.Commision,
		"LoanInfo": map[string]interface{}{
			"Loaner":   clientFullName,
			"Iin":      req.Contract.TaxCode,
			"LoanSum":  req.SubProcess.Model.LoanInfo.Sdok,
		},
		"TotalSums": map[string]float64{
			"AllsumTotal": allsumTotal,
			"RaschetTotal": raschetTotal,
			"DebtTotal": debtTotal,
			"SumSubsTotal": sumSubsTotal,
			"SumCliTotal": sumCliTotal,
			"CreditTotal": creditTotal,
			"OdPcnTotal": odPcnTotal,
		},
	}
}




