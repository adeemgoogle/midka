using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Quartz;
using Quartz.Impl;
using Quartz.Spi;
using Serilog;
using Serilog.Events;
using Serilog.Formatting.Compact;
using StackExchange.Redis;

namespace TradePointsLoader
{
    public class Program
    {
        private static readonly IConfiguration _config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .AddEnvironmentVariables()
            .Build();

        private static ConnectionMultiplexer _redis;
        private static IScheduler _scheduler;

        public static async Task<int> Main(string[] args)
        {
            ConfigureLogging();

            try
            {
                var host = CreateHostBuilder(args).Build();
                await host.RunAsync();
                return 0;
            }
            catch (Exception ex)
            {
                Log.Fatal(ex, "Host terminated unexpectedly");
                return 1;
            }
            finally
            {
                Log.CloseAndFlush();
                if (_redis != null)
                    await _redis.CloseAsync();
                if (_scheduler != null)
                    await _scheduler.Shutdown();
            }
        }

        static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureServices((hostContext, services) =>
                {
                    ConfigureServices(services);
                })
                .UseSerilog();

        static void ConfigureServices(IServiceCollection services)
        {
            services.AddLogging();
            services.AddSingleton<IHostedService, CombinedService>();
            services.AddSingleton<TheirDbService>();
            services.AddSingleton<IJobFactory, SingletonJobFactory>();
            services.AddSingleton<ISchedulerFactory, StdSchedulerFactory>();
            services.AddSingleton(provider =>
            {
                var connectionString = _config.GetConnectionString("Redis");
                return ConnectionMultiplexer.Connect(connectionString);
            });
        }

        static void ConfigureLogging()
        {
            Log.Logger = new LoggerConfiguration()
                .WriteTo.Console(restrictedToMinimumLevel: LogEventLevel.Debug, formatter: new RenderedCompactJsonFormatter())
                .CreateLogger();
        }

        public class CombinedService : IHostedService
        {
            private readonly ILogger<CombinedService> _logger;
            private readonly IConfiguration _config;
            private readonly ConnectionMultiplexer _redis;
            private readonly ISchedulerFactory _schedulerFactory;
            private IScheduler _scheduler;

            public CombinedService(
                ILogger<CombinedService> logger,
                IConfiguration config,
                ConnectionMultiplexer redis,
                ISchedulerFactory schedulerFactory)
            {
                _logger = logger;
                _config = config;
                _redis = redis;
                _schedulerFactory = schedulerFactory;
            }

            public async Task StartAsync(CancellationToken cancellationToken)
            {
                await StartRedisMonitorAsync(cancellationToken);
                await StartQuartzSchedulerAsync(cancellationToken);
            }

            public Task StopAsync(CancellationToken cancellationToken)
            {
                return Task.CompletedTask;
            }

            private async Task StartRedisMonitorAsync(CancellationToken cancellationToken)
            {
                var db = _redis.GetDatabase();
                var serviceName = _config["RedisServiceName"];

                while (!cancellationToken.IsCancellationRequested)
                {
                    var isMaster = await db.StringGetAsync(serviceName);
                    if (string.IsNullOrEmpty(isMaster))
                    {
                        _logger.LogInformation("This instance is master.");
                        await db.StringSetAsync(serviceName, Guid.NewGuid().ToString(), TimeSpan.FromSeconds(30));
                        await Task.Delay(TimeSpan.FromSeconds(10), cancellationToken);
                    }
                    else
                    {
                        _logger.LogInformation("This instance is slave, waiting for master to fail...");
                        await Task.Delay(TimeSpan.FromSeconds(30), cancellationToken);
                    }
                }
            }

            private async Task StartQuartzSchedulerAsync(CancellationToken cancellationToken)
            {
                _scheduler = await _schedulerFactory.GetScheduler(cancellationToken);

                var job = JobBuilder.Create<UploadJob>()
                    .WithIdentity("UploadJob", "group1")
                    .Build();

                var trigger = TriggerBuilder.Create()
                    .WithIdentity("UploadJobTrigger", "group1")
                    .StartNow()
                    .WithCronSchedule("0/30 * * * * ?") // Every 30 seconds for testing
                    .Build();

                await _scheduler.ScheduleJob(job, trigger, cancellationToken);
                await _scheduler.Start(cancellationToken);
            }
        }

        public class UploadJob : IJob
        {
            private readonly ILogger<UploadJob> _logger;
            private readonly TheirDbService _theirDbService;

            public UploadJob(ILogger<UploadJob> logger, TheirDbService theirDbService)
            {
                _logger = logger;
                _theirDbService = theirDbService;
            }

            public Task Execute(IJobExecutionContext context)
            {
                _logger.LogInformation("Started to upload information...");
                var result = _theirDbService.StealInformation();

                if (result)
                {
                    _logger.LogInformation("Successful inserted data");
                }
                else
                {
                    _logger.LogError("Failed to make cash");
                }

                return Task.CompletedTask;
            }
        }

        public class SingletonJobFactory : IJobFactory
        {
            private readonly IServiceProvider _serviceProvider;

            public SingletonJobFactory(IServiceProvider serviceProvider)
            {
                _serviceProvider = serviceProvider;
            }

            public IJob NewJob(TriggerFiredBundle bundle, IScheduler scheduler)
            {
                return _serviceProvider.GetRequiredService(bundle.JobDetail.JobType) as IJob;
            }

            public void ReturnJob(IJob job)
            {
                // Dispose job if necessary
            }
        }
    }
}
