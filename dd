package main

import (
	"encoding/json"
	"fmt"
	"log"
	"math"
	"strconv"
	"time"

	"github.com/gofiber/fiber/v2"
)

type ScheduleItem struct {
	Allsum   string `json:"allsum"`
	Raschet  string `json:"raschet"`
	Debt     string `json:"debt"`
	Sumsubs  string `json:"sumsubs"`
	Sumcli   string `json:"sumcli"`
	Credit   string `json:"credit"`
	Odpcn    string `json:"odpcn"`
}

type UpdDayResult struct {
	Response struct {
		Main struct {
			SCHEDULE struct {
				Payment []ScheduleItem `json:"payment"`
			} `json:"SCHEDULE"`
		} `json:"main"`
	} `json:"response"`
}

func parseJSON(input []byte) (*UpdDayResult, error) {
	var result UpdDayResult
	err := json.Unmarshal(input, &result)
	return &result, err
}

func sumValues(items []ScheduleItem, field string) string {
	var sum float64
	for _, item := range items {
		valueStr := ""
		switch field {
		case "allsum":
			valueStr = item.Allsum
		case "raschet":
			valueStr = item.Raschet
		case "debt":
			valueStr = item.Debt
		case "sumsubs":
			valueStr = item.Sumsubs
		case "sumcli":
			valueStr = item.Sumcli
		case "credit":
			valueStr = item.Credit
		case "odpcn":
			valueStr = item.Odpcn
		}

		if valueStr != "" {
			value, err := strconv.ParseFloat(valueStr, 64)
			if err == nil {
				sum += value
			}
		}
	}

	sum = math.Floor(sum*100) / 100
	return fmt.Sprintf("%.2f", sum)
}

func handleRequest(c *fiber.Ctx) error {
	// Simulated JSON input (Replace with actual request body)
	jsonInput := `{"response": {"main": {"SCHEDULE": {"payment": [{"allsum": "100.50", "raschet": "200.75"}]}}}}`

	upddayResult, err := parseJSON([]byte(jsonInput))
	if err != nil {
		return c.Status(500).JSON(fiber.Map{"error": "Invalid JSON"})
	}

	// Extract payment schedule
	shortSchedule := upddayResult.Response.Main.SCHEDULE.Payment

	// Calculate totals
	allsumTotal := sumValues(shortSchedule, "allsum")
	raschetTotal := sumValues(shortSchedule, "raschet")
	debtTotal := sumValues(shortSchedule, "debt")
	sumSubsTotal := sumValues(shortSchedule, "sumsubs")
	sumCliTotal := sumValues(shortSchedule, "sumcli")
	creditTotal := sumValues(shortSchedule, "credit")
	odPcnTotal := sumValues(shortSchedule, "odpcn")

	// Get current date
	myDate := time.Now().Format("02-01-2006")

	// Construct response
	scheduleData := fiber.Map{
		"LoanCode":      "123456",
		"LoanFromDate":  myDate,
		"CurrentDate":   myDate,
		"TotalSums": fiber.Map{
			"AllsumTotal":  allsumTotal,
			"RaschetTotal": raschetTotal,
			"DebtTotal":    debtTotal,
			"SumSubsTotal": sumSubsTotal,
			"SumCliTotal":  sumCliTotal,
			"CreditTotal":  creditTotal,
			"OdPcnTotal":   odPcnTotal,
		},
	}

	return c.JSON(scheduleData)
}

func main() {
	app := fiber.New()

	app.Get("/parse", handleRequest)

	log.Fatal(app.Listen(":3000"))
}
