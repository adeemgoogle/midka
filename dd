using System.Text;
using NUnit.Framework;
using System.Collections.Generic;
using ASTS_BRIDGE.Models;
using Microsoft.Extensions.Configuration;
using System.Threading;
using static ASTS_BRIDGE.Models.Decoder;
using static ASTS_BRIDGE.Models.SymbolDictionary;

namespace ASTS_BRIDGE.Tests
{
    [TestFixture]
    public class ServerTests
    {
        private Server server;

        [SetUp]
        public void Setup()
        {
            // Create a mock IConfiguration instance (Moq is not used here)
            var inMemorySettings = new Dictionary<string, string> {
                {"Asts:ServerAddress", "TestServerAddress"},
                {"Asts:ServerName", "TestServerName"},
                {"Asts:Service", "TestService"},
                {"Asts:UserId", "TestUserId"},
                {"Asts:Password", "TestPassword"},
                {"Asts:Interface", "TestInterface"},
                {"Asts:Language", "TestLanguage"},
                {"Asts:Logging", "TestLogging"},
                {"Asts:LogFolder", "TestLogFolder"},
                {"Kafka:Topic", "TestTopic"}, 
                {"Kafka:TopicDaily", "TestTopicDaily"}
            };

            IConfiguration configuration = new ConfigurationBuilder()
                .AddInMemoryCollection(inMemorySettings)
                .Build();

            server = new Server(configuration);
            server.AstsServer = new MockWrapper(); // Use a mock Wrapper for testing
        }

        [Test]
        public void ReadOrders_FirstCall_ReturnsOKAndStartsThread()
        {
            // Act
            string result = server.ReadOrders();

            // Assert
            Assert.AreEqual("OK", result);
            Assert.IsTrue(server.isReadingTable["ORDERS"]); // Verify the thread is started
        }

        [Test]
        public void ReadOrders_WhileReading_ReturnsAlreadyReadingMessage()
        {
            // Arrange
            server.isReadingTable["ORDERS"] = true;

            // Act
            string result = server.ReadOrders();

            // Assert
            Assert.AreEqual("Already reading ORDERS table", result);
        }

        [Test]
        public void CheckConnection_WhenDisconnected_CallsConnect()
        {
            // Arrange
            server.AstsServer.IsConnected = false; 

            // Act
            server.checkConnection();

            // Assert
            Assert.IsTrue(((MockWrapper)server.AstsServer).ConnectCalled);
        }

        [Test]
        public void CheckConnection_WhenConnected_DoesNotCallConnect()
        {
            // Arrange
            server.AstsServer.IsConnected = true;

            // Act
            server.checkConnection();

            // Assert
            Assert.IsFalse(((MockWrapper)server.AstsServer).ConnectCalled);
        }
    }

    // Mock Wrapper class for testing
    public class MockWrapper : Wrapper
    {
        public bool ConnectCalled { get; private set; } = false;
        public override void Connect(StringBuilder settings)
        {
            ConnectCalled = true;
        }

        public override void ConnectionStatus()
        {
            // Implement if needed
        }

        // Implement other abstract methods if necessary... 
    }
}
