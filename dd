using System;
using System.Collections.Generic;
using System.Threading;
using Moq;
using Newtonsoft.Json;
using NUnit.Framework;

namespace ASTS_BRIDGE.Models.Tests
{
    [TestFixture]
    public class ServerTests
    {
        private Mock<IConfiguration> _mockConfiguration;
        private Mock<Wrapper> _mockAstsServer;
        private Mock<Kafka> _mockKafka;
        private Server _server;
        
        [SetUp]
        public void SetUp()
        {
            _mockConfiguration = new Mock<IConfiguration>();
            _mockAstsServer = new Mock<Wrapper>();
            _mockKafka = new Mock<Kafka>();
            
            // Setup configuration values
            _mockConfiguration.Setup(c => c["Asts:ServerAddress"]).Returns("testAddress");
            _mockConfiguration.Setup(c => c["Asts:ServerName"]).Returns("testName");
            _mockConfiguration.Setup(c => c["Asts:Service"]).Returns("testService");
            _mockConfiguration.Setup(c => c["Asts:UserId"]).Returns("testUserId");
            _mockConfiguration.Setup(c => c["Asts:Password"]).Returns("testPassword");
            _mockConfiguration.Setup(c => c["Asts:Interface"]).Returns("testInterface");
            _mockConfiguration.Setup(c => c["Asts:Language"]).Returns("testLanguage");
            _mockConfiguration.Setup(c => c["Asts:Logging"]).Returns("testLogging");
            _mockConfiguration.Setup(c => c["Asts:LogFolder"]).Returns("testLogFolder");
            _mockConfiguration.Setup(c => c["Kafka:Topic"]).Returns("testKafkaTopic");
            _mockConfiguration.Setup(c => c["Kafka:TopicDaily"]).Returns("testKafkaTopicDaily");
            _mockConfiguration.Setup(c => c.GetSection("PublicBoards").Get<string[]>()).Returns(new[] { "Board1", "Board2" });
            _mockConfiguration.Setup(c => c.GetSection("DailyBoards").Get<string[]>()).Returns(new[] { "DailyBoard1", "DailyBoard2" });

            // Create instance of Server
            _server = new Server(_mockConfiguration.Object);
            _server.AstsServer = _mockAstsServer.Object;
            Kafka.Instance = _mockKafka.Object;
        }

        [Test]
        public void WriteOrders_WhenOrdersAreAvailable_WritesToKafka()
        {
            // Arrange
            var table = new UniversalTable
            {
                Name = "ORDERS",
                Ref = "OrdersRef",
                Rows = new List<UniversalRow> { new UniversalRow() }
            };
            
            _mockAstsServer.Setup(m => m.OpenTable("ORDERS", null, out It.Ref<int>.IsAny)).Returns(table);
            _mockAstsServer.Setup(m => m.CloseTable(It.IsAny<int>())).Returns(0);

            // Act
            _server.WriteOrders();

            // Assert
            _mockAstsServer.Verify(m => m.OpenTable("ORDERS", null, out It.Ref<int>.IsAny), Times.Once);
            _mockKafka.Verify(k => k.Write("BROKERAGE-KASE-ASTS-ALLOCATIONS", "ORDERS", It.IsAny<string>()), Times.AtLeastOnce);
        }

        [Test]
        public void WriteOrders_WhenNoOrdersAvailable_LogsEmptyTable()
        {
            // Arrange
            var table = new UniversalTable
            {
                Name = "ORDERS",
                Ref = "OrdersRef",
                Rows = new List<UniversalRow>()
            };

            _mockAstsServer.Setup(m => m.OpenTable("ORDERS", null, out It.Ref<int>.IsAny)).Returns(table);

            // Act
            _server.WriteOrders();

            // Assert
            _mockAstsServer.Verify(m => m.OpenTable("ORDERS", null, out It.Ref<int>.IsAny), Times.Once);
            // Check the logs or console output for the "ORDERS table is empty" message
        }
    }
}
------------------

public class Kafka
{
    private static IProducer<string?, string> ProducerBuilder;

    public static void Init(IConfiguration Config)
    {
        var config = new ConsumerConfig
        {
            BootstrapServers = Config["Kafka:BootstrapServers"],
            SecurityProtocol = SecurityProtocol.SaslSsl,
            SaslMechanism = SaslMechanism.ScramSha256,
            SaslUsername = Config["Kafka:SaslUsername"],
            SaslPassword = Config["Kafka:SaslPassword"],
            EnableSslCertificateVerification = false,
        };

        ProducerBuilder = new ProducerBuilder<string?, string>(config).Build();
    }

    public static bool Write(string topic, string? key, string jsonStr)
    {
        try
        {
            var msg = new Message<string?, string> { Key = key, Value = jsonStr };
            var dr = ProducerBuilder.ProduceAsync(topic, msg);
        }
        catch (ProduceException<Null, string>)
        {
            return false;
        }
        return true;
    }
Серьезность	Код	Описание	Проект	Файл	Строка	Состояние подавления
Ошибка	CS0117	"Kafka" не содержит определение для "Instance".	
