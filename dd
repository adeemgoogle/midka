using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Hosting;
using TradePointsLoader.controllers;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Internal;
public class Startup
{
    private readonly IConfiguration _configuration;

    public Startup(IConfiguration configuration)
    {
        _configuration = configuration;
    }

    public void ConfigureServices(IServiceCollection services)
    {
        services.AddMvc();
        services.AddOptions();
        services.AddHealthChecks();
       
    }

    public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILogger<Startup> log)
    {
        
        app.UseMvc(routes =>
        {
            routes.MapRoute(
                 name: "default",
             template: "{controller = Home}/{action=Index}/{id?}"
                );
            routes.MapRoute(
                 name: "healthz",
             template: "{controller = Healthz}/{action=GetHealthz}"
                );
        });
        log.LogInformation("Configuring routers");
        
        app.UseHealthChecks("/healthz");
        app.UseRequestLocalization();
    }
}


class Program
{
    private static readonly IConfiguration _config = new ConfigurationBuilder().SetBasePath(AppDomain.CurrentDomain.BaseDirectory).AddJsonFile("appsettings.json").AddEnvironmentVariables().Build();

    static async Task<int> Main(string[] args)
    {
        Log.Logger = new LoggerConfiguration()
            .WriteTo.Console(restrictedToMinimumLevel: LogEventLevel.Debug, formatter: new RenderedCompactJsonFormatter())
            .CreateLogger();
        try
        {
            var host = new WebHostBuilder()
                .UseKestrel()
                .UseUrls("http://localhost:5000")
                .ConfigureServices((hostContext, service) =>
                {
                    service.AddHealthChecks();
                    service.AddSingleton<HealthzController>();

                })
                .UseStartup<Startup>()

                .Build();
             host.Run();
            return 0;
        }catch(Exception ex)
        {
            Log.Fatal(ex, "Host terminated");
        }

using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using TradePointsLoader.Service;

namespace TradePointsLoader.controllers
{
    [ApiController]
    [Route("[healthz]")]
    public class HealthzController : ControllerBase
    {
        private readonly ILogger<HealthzController> _logger;

        public HealthzController(ILogger<HealthzController> logger)
        {
            _logger = logger;
        }

        [HttpGet]
        public IActionResult GetHealthz()
        {
            return new OkObjectResult("OK");
        }
    }

}


Now listening on: http://localhost:5000
Application started. Press Ctrl+C to shut down.

настрой нормально конфигурацию маршрутизатора 
