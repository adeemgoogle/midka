
[Test]
public void ReadNegdeals_WhenNotReading_StartsReadingAndReturnsOK()
{
    // Arrange
    _server.isReadingTable["NEGDEALS"] = false;

    // Создаем частичную заглушку для Server
    var serverMock = Mock.Of<Server>(_ => _.checkConnection() == null); // Заменяем checkConnection пустой реализацией
    
    // Устанавливаем WrapperMock с IsConnected = true 
    var wrapperMock = new WrapperMock(_server.AstsServer);
    Mock.Get(wrapperMock).Setup(w => w.IsConnected).Returns(true);
    _server.AstsServer = wrapperMock;

    // Act
    var result = serverMock.ReadNegdeals();

    // Assert
    Assert.AreEqual("OK", result);
    Assert.IsTrue(serverMock.isReadingTable["NEGDEALS"]);

    // Убеждаемся, что Connect() не был вызван
    Mock.Get(wrapperMock).Verify(w => w.Connect(It.IsAny<StringBuilder>()), Times.Never);
} 


һһһһһһһһһһһһһһ

public string ReadNegdeals()
{
    if (isReadingTable["NEGDEALS"])
    {
        return "Already reading NEGDEALS table";
    }
    checkConnection();

    isReadingTable["NEGDEALS"] = true;
    Thread myThread = new Thread(WriteNegdeals);
    myThread.Start();

    return "OK";
}


public bool IsConnected
{
    get
    {
        return _isConnected;
    }
}
protected bool _isConnected;
 
private void Connect()
 {
     StringBuilder settings = new StringBuilder();

     if (Service != null)
     {
         settings.Append("SERVICE=" + Service + "\r\n");
         settings.Append("BROADCAST=" + ServerAddress + "\r\n");
         settings.Append("IFACENAME=" + Interface + "\r\n");
     } else
     {
         settings.Append("HOST=" + ServerAddress + "\r\n");
         settings.Append("INTERFACE=" + Interface + "\r\n");
     }
     
     settings.Append("SERVER=" + ServerName + "\r\n");
     settings.Append("USERID=" + UserId + "\r\n");
     settings.Append("PASSWORD=" + Password + "\r\n");
     settings.Append("LOGGING=" + Logging + "\r\n");
     settings.Append("LOGFOLDER=" + LogFolder + "\r\n");
     settings.Append("LANGUAGE=" + Language + "\r\n");

     int attempt = 5;
     while (attempt > 0)
     {
         if (AstsServer.IsConnected)
         {
             break;
         }

         AstsServer.Connect(settings);
         Thread.Sleep(1 % (attempt + 1) * 1000);
         attempt--;
     }
 }

private void checkConnection()
{
    AstsServer.ConnectionStatus();
    if (!AstsServer.IsConnected)
    {
        Connect();
    }
}

mock rthis function
