 string secnameUtf8 = row.GetAsString("SECNAME");
 if (secnameUtf8 != null)
 {
     byte[] bytes = Encoding.Default.GetBytes(secnameUtf8);
     
     string secname = Encoding.UTF8.GetString(bytes);
     securityRow.secName = secname;
 }

this code send me �����������
������������ 
how to fix it?

string secnameUtf8 = row.GetAsString("SECNAME");
if (secnameUtf8 != null)
{
    // List of encodings to try
    Encoding[] encodings = { Encoding.UTF8, Encoding.GetEncoding("windows-1251"), Encoding.Default };

    // Iterate over the encodings and try to decode the string
    string secname = null;
    foreach (Encoding encoding in encodings)
    {
        try
        {
            byte[] bytes = encoding.GetBytes(secnameUtf8);
            secname = encoding.GetString(bytes);
            // If decoding succeeds, break out of the loop
            break;
        }
        catch (DecoderFallbackException)
        {
            // If decoding fails, continue to the next encoding
            continue;
        }
    }

    // Use the decoded string
    securityRow.secName = secname;
}

using System.IO;
using System.Text;

string secnameUtf8 = row.GetAsString("SECNAME");
if (secnameUtf8 != null)
{
    string secname = DecodeStringWithFallback(secnameUtf8);
    securityRow.secName = secname;
}

string DecodeStringWithFallback(string input)
{
    // List of encodings to try
    Encoding[] encodings = { Encoding.UTF8, Encoding.Default };

    foreach (Encoding encoding in encodings)
    {
        try
        {
            // Decode the string using the current encoding
            using (MemoryStream stream = new MemoryStream(Encoding.Default.GetBytes(input)))
            {
                using (StreamReader reader = new StreamReader(stream, encoding))
                {
                    string decodedString = reader.ReadToEnd();
                    return decodedString;
                }
            }
        }
        catch (DecoderFallbackException)
        {
            // If decoding fails, continue to the next encoding
            continue;
        }
    }

    // If none of the encodings work, return the original input
    return input;
}







