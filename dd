using Microsoft.Extensions.Configuration;
using Npgsql;
using System;
using System.Data;
using System.Threading.Tasks;
using TradePointAPI.Models;
using TradePointAPI.Repositories;

namespace TradePointAPI.PostgresServices
{
    public class PostgresService : IRepository
    {
        private readonly IConfiguration _config;
        private readonly NpgsqlConnection _connection;

        public PostgresService(IConfiguration configuration)
        {
            _config = configuration;
            _connection = new NpgsqlConnection(_config.GetConnectionString("db"));
            try
            {
                _connection.Open();
                Console.WriteLine("POSTGRES CONNECTED");
                Console.WriteLine($"Connection to 'db' established successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred while connecting to 'db': {ex.Message}");
                throw;
            }
        }

        public IDbConnection GetConnection()
        {
            return _connection;
        }

        public async Task<ATM> GetAtmById(string id)
        {
            var query = "SELECT id, kato FROM atm WHERE id = @id";
            var row = await GetRowByID(query, new NpgsqlParameter("id", id));
            if (row == null)
            {
                return null;
            }
            return GetMappingATM(row);
        }

        public async Task<ATM> GetATMByCircle(double lat, double lng)
        {
            var query = "SELECT * FROM atm, atmworktime WHERE lat = @lat AND lng = @lng";
            var row = await GetRowByID(query, new NpgsqlParameter("lat", lat), new NpgsqlParameter("lng", lng));
            if (row == null)
            {
                return null;
            }
            return row;
        }

        private async Task<ATM> GetRowByID(string query, params NpgsqlParameter[] parameters)
        {
            var _Atm = new ATM();

            using (var cmd = new NpgsqlCommand(query, _connection))
            {
                cmd.Parameters.AddRange(parameters);

                using (var reader = await cmd.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        if (reader.HasRows)
                        {
                            var row = new ATM()
                            {
                                Id = reader["id"].ToString(),
                                KatoCode = reader["kato"].ToString(),
                            };
                            _Atm = row;
                        }
                    }
                    if (!reader.HasRows)
                    {
                        _Atm = null;
                    }
                }
            }
            return _Atm;
        }
        private ATM GetMappingATM(ATM _atm)
        {
            return new ATM()
            {
                KatoCode = _atm.KatoCode,
            };
        }
    }
}
-------------------------
using GraphiQl;
using GraphQL;
using GraphQL.Types;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using TradePointAPI.Models.GraphQL;
using TradePointAPI.Repositories;
using Serilog;
using Microsoft.Extensions.Logging;
using Prometheus;
using TradePointAPI.PostgresServices;

using TradePointAPI.Queries;
using TaxpayerApi.Schemas;

namespace TradePointAPI
{
    public class Startup
    {
        private readonly IConfiguration Configuration;

        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        /// <summary>
        /// This method gets called by the runtime. Use this method to add services to the container.
        /// For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        /// </summary>
        /// <param name="services"></param>
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddMvc();
            services.AddOptions();
            services.AddSingleton<IRepository, PostgresService>();
            services.AddSingleton<IConfiguration>(Configuration);
            services.AddSingleton<ISchema, TradePointsSchema>();
            services.AddScoped<TPQuery>();
            services.AddScoped<IDocumentExecuter, DocumentExecuter>();
            services.AddTransient<ATMType>();
            services.AddTransient<CircleInputType>();
            services.AddHealthChecks();
            var sp = services.BuildServiceProvider();
            var dbConnector = new PostgresService(Configuration);
           /* services.AddSingleton<ISchema>(new TradePointsSchema(new FuncDependencyResolver(type => sp.GetService(type))));*/
            
            services.AddSingleton<IDependencyResolver>(_ => new FuncDependencyResolver(_.GetRequiredService));
        }
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory logger)
        {
            logger.AddSerilog();

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            app.UseMetricServer();
            app.UseGraphiQl();
			app.UseHealthChecks("/healthz");
            app.UseMvc();
        }
    }
}
