public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ILoggerFactory logger)
{
    
    logger.AddSerilog();

    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
    }
    
    app.UseMetricServer();
    app.UseGraphiQl();
    app.UseRouting();
    app.UseEndpoints(endpoints => endpoints.MapControllers());
    app.UseHealthChecks("/healthz");
}

------
[Route("")]
public class QueryController : Controller
{
    private readonly ISchema _schema;
    private readonly IDocumentExecuter _documentExecuter;

    public QueryController(ISchema schema, IDocumentExecuter documentExecuter)
    {
        _schema = schema;
        _documentExecuter = documentExecuter;
    }

    [HttpPost]
    public async Task<IActionResult> Post([FromBody] QueryDTO query)
    {
        if (query == null) { throw new ArgumentNullException(nameof(query)); }
        var inputs = query.Variables?.ToString().ToInputs(); 
        var execOptions = new ExecutionOptions()
        {
            Schema = _schema,
            Query = query.Query,
            Inputs = inputs
        };

        try
        {
            var res = await _documentExecuter.ExecuteAsync(execOptions).ConfigureAwait(false);

            if (res.Errors?.Count > 0)
            {
               
                foreach (var err in res.Errors)
                {
                    Log.Error("Not Found {err} query {query}", err.Message, query.Query);
                }
                return BadRequest(res);
            }

            Log.Information("Found {res} query {query}", res.ToString(), query.Query);
            return Ok(res);

        }
        catch (Exception ex)
        {
            Console.WriteLine("my error is here");
            
            Log.Error("exception {ex} query {query}", ex.Message, query.Query);
            return BadRequest(ex);
        }
    }
using Microsoft.AspNetCore.Http;
using Newtonsoft.Json.Linq;
using System;
using System.IO;
using System.Threading.Tasks;

public class CleanGraphiQLResponseMiddleware
{
    private readonly RequestDelegate _next;

    public CleanGraphiQLResponseMiddleware(RequestDelegate next)
    {
        _next = next;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        var originalBodyStream = context.Response.Body;

        using (var responseBody = new MemoryStream())
        {
            context.Response.Body = responseBody;

            await _next(context);

            responseBody.Seek(0, SeekOrigin.Begin);
            var responseBodyString = await new StreamReader(responseBody).ReadToEndAsync();

            // Check if the request is for GraphiQL
            if (context.Request.Path.StartsWithSegments("/graphiql"))
            {
                // Remove unwanted fields from JSON response
                var jsonResponse = JObject.Parse(responseBodyString);
                jsonResponse.Remove("query");
                jsonResponse.Remove("document");

                // Convert modified JSON back to string
                var modifiedResponse = jsonResponse.ToString();

                // Write modified response back to response stream
                context.Response.Body = new MemoryStream();
                await context.Response.WriteAsync(modifiedResponse);
            }
            else
            {
                // Write original response back to response stream
                responseBody.Seek(0, SeekOrigin.Begin);
                await responseBody.CopyToAsync(originalBodyStream);
            }
        }
    }
}
