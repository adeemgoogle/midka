package main

import (
	"fmt"
	"time"
	"strings"

	"github.com/gofiber/fiber/v2"
	"github.com/golang-jwt/jwt/v4"
)

// Секретный ключ для подписи токенов
var jwtSecret = []byte("your-secret-key")

func main() {
	// Создаем новое приложение Fiber
	app := fiber.New()

	// Маршрут для проверки токена
	app.Get("/check-token", func(c *fiber.Ctx) error {
		// Получаем заголовок Authorization
		authHeader := c.Get("Authorization")

		// Проверяем, начинается ли заголовок с "Bearer "
		if !strings.HasPrefix(authHeader, "Bearer ") {
			return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{
				"message": "Invalid authorization format",
			})
		}

		// Извлекаем токен, удаляя "Bearer " из начала строки
		tokenString := strings.TrimPrefix(authHeader, "Bearer ")

		// Парсим токен
		token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
			// Проверяем метод подписи, ожидаем "HMAC"
			if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
				return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
			}
			return jwtSecret, nil
		})

		// Если произошла ошибка при парсинге токена
		if err != nil {
			return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{
				"message": "Invalid token",
			})
		}

		// Проверяем, является ли токен валидным и существует ли в нем claim "iat"
		if claims, ok := token.Claims.(jwt.MapClaims); ok && token.Valid {
			// Извлекаем время создания токена (iat - issued at)
			if iat, ok := claims["iat"].(float64); ok {
				// Преобразуем iat в время
				issuedAt := time.Unix(int64(iat), 0)

				// Текущее время
				currentTime := time.Now()

				// Проверяем, прошло ли больше 5 часов с момента создания токена
				if currentTime.Sub(issuedAt) > 5*time.Hour {
					// Токен просрочен — возвращаем false
					return c.JSON(fiber.Map{
						"valid": false,
					})
				}

				// Если токен действителен
				return c.JSON(fiber.Map{
					"valid": true,
				})
			}
		}

		// Если токен недействителен
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{
			"message": "Invalid token",
		})
	})

	// Запускаем приложение
	app.Listen(":3000")
}
