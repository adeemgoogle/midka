package slave

import (
	"context"
	"errors"
	"github.com/google/uuid"
	"github.com/redis/go-redis/v9"
	"log"
	"strconv"
	"strings"
	"time"
)

var (
	redisClient *redis.Client
	servers     []string
	password    string
	serviceName string
	db          int
	serverCount int
	id          int
)

func Check(serversString, pswrd, servName, dbNum string) {
	servers = strings.Split(serversString, ",")
	serverCount = len(servers)
	id = 0
	password = pswrd
	serviceName = servName
	dbInt, err := strconv.Atoi(dbNum)
	db = dbInt
	if err != nil {
		log.Fatal("slave: redis db must be number")
	}
	ctx := context.Background()

	setRedisClient()

	for {
		if isMasterDead(ctx) {
			becomeMaster(ctx)
			return
		}
		time.Sleep(30 * time.Second)
	}
}

func setRedisClient() {
	redisClient = redis.NewClient(&redis.Options{
		Addr:     servers[id],
		Password: password,
		DB:       db,
	})

	id = (id + 1) % serverCount
}

func isMasterDead(ctx context.Context) bool {
	res, err := redisClient.Get(ctx, serviceName).Result()
	if err != nil && !errors.Is(err, redis.Nil) {
		setRedisClient()
		return isMasterDead(ctx)
	}
	return res == ""
}

func becomeMaster(ctx context.Context) {
	go func() {
		for {
			updateStatus(ctx)
			time.Sleep(10 * time.Second)
		}
	}()
}

func updateStatus(ctx context.Context) {
	id := uuid.New()
	_, err := redisClient.Set(ctx, serviceName, id.String(), 30*time.Second).Result()
	if err != nil {
		setRedisClient()
		updateStatus(ctx)
	}
}
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using StackExchange.Redis;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace SlaveService
{
    public class RedisSlaveService : IHostedService
    {
        private readonly ILogger<RedisSlaveService> _logger;
        private readonly string[] _servers;
        private readonly string _password;
        private readonly string _serviceName;
        private readonly int _db;
        private ConnectionMultiplexer _redis;
        private IDatabase _dbInstance;
        private int _serverIndex;

        public RedisSlaveService(ILogger<RedisSlaveService> logger, string servers, string password, string serviceName, int db)
        {
            _logger = logger;
            _servers = servers.Split(",");
            _password = password;
            _serviceName = serviceName;
            _db = db;
            _serverIndex = 0;
        }

        public async Task StartAsync(CancellationToken cancellationToken)
        {
            SetRedisClient();
            await Task.Run(async () =>
            {
                while (!cancellationToken.IsCancellationRequested)
                {
                    if (await IsMasterDead())
                    {
                        await BecomeMaster();
                        return;
                    }
                    await Task.Delay(TimeSpan.FromSeconds(30), cancellationToken);
                }
            }, cancellationToken);
        }

        public Task StopAsync(CancellationToken cancellationToken)
        {
            _redis?.Dispose();
            return Task.CompletedTask;
        }

        private void SetRedisClient()
        {
            var options = new ConfigurationOptions
            {
                EndPoints = { _servers[_serverIndex] },
                Password = _password,
                DefaultDatabase = _db
            };
            _redis = ConnectionMultiplexer.Connect(options);
            _dbInstance = _redis.GetDatabase();
            _serverIndex = (_serverIndex + 1) % _servers.Length;
        }

        private async Task<bool> IsMasterDead()
        {
            try
            {
                var res = await _dbInstance.StringGetAsync(_serviceName);
                return res.IsNullOrEmpty;
            }
            catch (RedisException)
            {
                SetRedisClient();
                return await IsMasterDead();
            }
        }

        private async Task BecomeMaster()
        {
            await Task.Run(async () =>
            {
                while (true)
                {
                    await UpdateStatus();
                    await Task.Delay(TimeSpan.FromSeconds(10));
                }
            });
        }

        private async Task UpdateStatus()
        {
            var id = Guid.NewGuid().ToString();
            try
            {
                await _dbInstance.StringSetAsync(_serviceName, id, TimeSpan.FromSeconds(30));
            }
            catch (RedisException)
            {
                SetRedisClient();
                await UpdateStatus();
            }
        }
    }
}
