import java.text.SimpleDateFormat;
try {

def subprocess = execution.getVariable("subprocess");
def businessKey = execution.getVariable("businessKey");
def upddayResult = execution.getVariable("upddayResult");
def commision = execution.getVariable("commision");
def parser = new groovy.json.JsonSlurperClassic();
upddayResult = parser.parseText(upddayResult.data.cshd);
def vars = execution.getVariable("vars");
def upddayProcessId = vars.pko_updday.fileUploader.processId;
execution.setVariable("upddayProcessId", upddayProcessId);
def viewId = vars.pko_updday.fileUploader.viewId;
int num = (int) viewId;
execution.setVariable("viewId", num);

def myDate = new java.text.SimpleDateFormat("dd-MM-yyyy").format(new Date());

def shortSchedule = upddayResult.response.main.SCHEDULE.payment;

def main = upddayResult.get('response').remove('main');
main.remove("SCHEDULE");
def response = upddayResult.remove('response');

def allsumTotal = [];
shortSchedule.each { if(it.allsum != null){
allsumTotal += Double.parseDouble(it.allsum);
allsumTotal = allsumTotal.inject(0) {result, i -> result + i};
}else{
    allsumTotal = 0;
}}
allsumTotal =  Math.floor(allsumTotal * 100) / 100;    
allsumTotal = String.format("%.2f", allsumTotal);

def raschetTotal = [];
shortSchedule.each { if(it.raschet != null){
  raschetTotal += Double.parseDouble(it.raschet);
  raschetTotal = raschetTotal.inject(0) {result, i -> result + i};
}else{
  raschetTotal =  0;
}};

raschetTotal =  Math.floor(raschetTotal * 100) / 100;
raschetTotal = String.format("%.2f", raschetTotal);

def debtTotal = [];
shortSchedule.each { if(it.debt != null){
debtTotal += Double.parseDouble(it.debt);
debtTotal = debtTotal.inject(0) {result, i -> result + i};
}else{
  debtTotal = 0;
}};
debtTotal = Math.floor(debtTotal * 100) / 100;
debtTotal = String.format("%.2f", debtTotal);

def sumSubsTotal = [];
shortSchedule.each { if(it.sumsubs != null) {
sumSubsTotal += Double.parseDouble(it.sumsubs)
sumSubsTotal = sumSubsTotal.inject(0) {result, i -> result + i};
} else{
sumSubsTotal = 0;
}};
sumSubsTotal = Math.floor(sumSubsTotal * 100) / 100;
sumSubsTotal = String.format("%.2f", sumSubsTotal);

def sumCliTotal = [];
shortSchedule.each { if(it.sumcli != null) {
sumCliTotal += Double.parseDouble(it.sumcli)
sumCliTotal = sumCliTotal.inject(0) {result, i -> result + i};
} else{
sumCliTotal = 0;
}};
sumCliTotal = Math.floor(sumCliTotal * 100) / 100;
sumCliTotal = String.format("%.2f", sumCliTotal);

def creditTotal = [];
shortSchedule.each {if(it.credit != null){
creditTotal += Double.parseDouble(it.credit);
creditTotal = creditTotal.inject(0) {result, i -> result + i};
}else{
creditTotal = 0;
}};
creditTotal =  Math.floor(creditTotal * 100) / 100;
creditTotal = String.format("%.2f", creditTotal);

def odPcnTotal = [];
shortSchedule.each { if(it.sumcli != null) {
odPcnTotal += Double.parseDouble(it.odpcn)
odPcnTotal = odPcnTotal.inject(0) {result, i -> result + i};
} else{
odPcnTotal = 0;
}};
odPcnTotal =  Math.floor(odPcnTotal * 100) / 100;
odPcnTotal = String.format("%.2f", odPcnTotal);

def contractInfo = new HashMap<>();
contractInfo.putAll(response);
contractInfo.putAll(main);



def ScheduleStruct = shortSchedule;
ScheduleStruct = ScheduleStruct.each {it.remove("lprs")};
ScheduleStruct = ScheduleStruct.each {it.remove("num")};
ScheduleStruct = ScheduleStruct.each {it.remove("sumpcn")};

def coBorrowers = new HashMap<>();

def prsdtl = contractInfo?.PRS?.prsdtl;

if(prsdtl){
def prsdtl0=[
PrsName: contractInfo?.PRS.prsdtl[0]?.prsname,
PrsTaxcode: contractInfo?.PRS.prsdtl[0]?.prstaxcode,
PrsAddrres: [contractInfo?.PRS.prsdtl[0]?.prsaddrresrus1, contractInfo?.PRS?.prsdtl[0]?.prsaddrresrus2].join(' '),
PrsTel: contractInfo?.PRS?.prsdtl[0]?.prstel
];
CoBorrower = new HashMap<>()
CoBorrower.putAll(CoBorrower:prsdtl0)
coBorrowers.putAll(CoBorrower) 
    
def prsdtl2=[
PrsName2: contractInfo?.PRS?.prsdtl[1]?.prsname,
PrsTaxcode2: contractInfo?.PRS?.prsdtl[1]?.prstaxcode,
PrsAddrres2: [contractInfo?.PRS?.prsdtl[1]?.prsaddrresrus1, contractInfo?.PRS?.prsdtl[1]?.prsaddrresrus2].join(' '),
PrsTel2: contractInfo.PRS?.prsdtl[1]?.prstel
];
CoBorrower2 = new HashMap<>()
CoBorrower2.putAll(CoBorrower2:prsdtl2)
coBorrowers.putAll(CoBorrower2);

def prsdtl3=[
PrsName3: contractInfo?.PRS?.prsdtl[2]?.prsname,
PrsTaxcode3: contractInfo?.PRS?.prsdtl[2]?.prstaxcode,
PrsAddrres3: [contractInfo?.PRS?.prsdtl[2]?.prsaddrresrus1, contractInfo?.PRS?.prsdtl[2]?.prsaddrresrus2].join(' '),
PrsTel3: contractInfo.PRS?.prsdtl[2]?.prstel
];
CoBorrower3 = new HashMap<>()
CoBorrower3.putAll(CoBorrower3:prsdtl3)
coBorrowers.putAll(CoBorrower3);


def prsdtl4=[
PrsName4: contractInfo?.PRS?.prsdtl[3]?.prsname,
PrsTaxcode4: contractInfo?.PRS?.prsdtl[3]?.prstaxcode,
PrsAddrres4: [contractInfo?.PRS?.prsdtl[3]?.prsaddrresrus1, contractInfo.PRS?.prsdtl[3]?.prsaddrresrus2].join(' '),
PrsTel4: contractInfo?.PRS?.prsdtl[3]?.prstel
];
CoBorrower4 = new HashMap<>()
CoBorrower4.putAll(CoBorrower4:prsdtl4)
coBorrowers.putAll(CoBorrower4);

def prsdtl5=[
PrsName5: contractInfo?.PRS?.prsdtl[4]?.prsname,
PrsTaxcode5: contractInfo?.PRS?.prsdtl[4]?.prstaxcode,
PrsAddrres5: [contractInfo?.PRS?.prsdtl[4]?.prsaddrresrus1, contractInfo?.PRS?.prsdtl[4]?.prsaddrresrus2].join(' '),
PrsTel5: contractInfo.PRS?.prsdtl[4]?.prstel
];
CoBorrower5 = new HashMap<>();
CoBorrower5.putAll(CoBorrower5:prsdtl5)
coBorrowers.putAll(CoBorrower5);


def prsdtl6=[
PrsName6: contractInfo?.PRS?.prsdtl[5]?.prsname,
PrsTaxcode6: contractInfo?.PRS?.prsdtl[5]?.prstaxcode,
PrsAddrres6: [contractInfo?.PRS?.prsdtl[5]?.prsaddrresrus1, contractInfo?.PRS?.prsdtl[5]?.prsaddrresrus2].join(' '),
PrsTel6: contractInfo?.PRS?.prsdtl[5]?.prstel
];
CoBorrower6 = new HashMap<>();
CoBorrower6.putAll(CoBorrower6:prsdtl6)
coBorrowers.putAll(CoBorrower6);

def prsdtl7=[
PrsName7: contractInfo?.PRS?.prsdtl[6]?.prsname,
PrsTaxcode7: contractInfo?.PRS?.prsdtl[6]?.prstaxcode,
PrsAddrres7: [contractInfo?.PRS?.prsdtl[6]?.prsaddrresrus1, contractInfo.PRS?.prsdtl[6]?.prsaddrresrus2].join(' '),
PrsTel7: contractInfo?.PRS?.prsdtl[6]?.prstel
];
CoBorrower7 = new HashMap<>();
CoBorrower7.putAll(CoBorrower7:prsdtl7)
coBorrowers.putAll(CoBorrower7);


def prsdtl8=[
PrsName8: contractInfo?.PRS?.prsdtl[7]?.prsname,
PrsTaxcode8: contractInfo?.PRS?.prsdtl[7]?.prstaxcode,
PrsAddrres8: [contractInfo?.PRS?.prsdtl[7]?.prsaddrresrus1, contractInfo?.PRS?.prsdtl[7]?.prsaddrresrus2].join(' '),
PrsTel8: contractInfo?.PRS?.prsdtl[7]?.prstel
];
CoBorrower8 = new HashMap<>();
CoBorrower8.putAll(CoBorrower8:prsdtl8)
coBorrowers.putAll(CoBorrower8);

def prsdtl9=[
PrsName9: contractInfo?.PRS?.prsdtl[8]?.prsname,
PrsTaxcode9: contractInfo?.PRS?.prsdtl[8]?.prstaxcode,
PrsAddrres9: [contractInfo?.PRS?.prsdtl[8]?.prsaddrresrus1, contractInfo.PRS?.prsdtl[8]?.prsaddrresrus2].join(' '),
PrsTel9: contractInfo?.PRS?.prsdtl[8]?.prstel
];
CoBorrower9 = new HashMap<>();
CoBorrower9.putAll(CoBorrower9:prsdtl9)
coBorrowers.putAll(CoBorrower9);

def prsdtl10=[
PrsName10: contractInfo?.PRS?.prsdtl[9]?.prsname,
PrsTaxcode10: contractInfo?.PRS?.prsdtl[9]?.prstaxcode,
PrsAddrres10: [contractInfo?.PRS?.prsdtl[9]?.prsaddrresrus1, contractInfo?.PRS?.prsdtl[9]?.prsaddrresrus2].join(' '),
PrsTel10: contractInfo?.PRS?.prsdtl[9]?.prstel
];
CoBorrower10 = new HashMap<>();
CoBorrower10.putAll(CoBorrower10:prsdtl10)
coBorrowers.putAll(CoBorrower10);
}else{
    def PrsAddrres = [PrsAddrres: null];
    def CoBorrower = new HashMap<>()
    CoBorrower.putAll(CoBorrower:PrsAddrres);
    coBorrowers.putAll(CoBorrower);
    
    def PrsAddrres1 = [PrsAddrres1: null];
    def CoBorrower1 = new HashMap<>()
    CoBorrower1.putAll(CoBorrower1:PrsAddrres1);
    coBorrowers.putAll(CoBorrower1);
    
    def PrsAddrres2 = [PrsAddrres2: null];
    def CoBorrower2 = new HashMap<>()
    CoBorrower2.putAll(CoBorrower2:PrsAddrres2);
    coBorrowers.putAll(CoBorrower2);
    
    def PrsAddrres3 = [PrsAddrres3: null];
    def CoBorrower3 = new HashMap<>()
    CoBorrower1.putAll(CoBorrower3:PrsAddrres3);
    coBorrowers.putAll(CoBorrower3);
    
    def PrsAddrres4 = [PrsAddrres4: null];
    def CoBorrower4 = new HashMap<>()
    CoBorrower4.putAll(CoBorrower4:PrsAddrres4);
    coBorrowers.putAll(CoBorrower4);
    
    def PrsAddrres5 = [PrsAddrres5: null];
    def CoBorrower5 = new HashMap<>()
    CoBorrower5.putAll(CoBorrower5:PrsAddrres5);
    coBorrowers.putAll(CoBorrower5);
    
    def PrsAddrres6 = [PrsAddrres6: null];
    def CoBorrower6 = new HashMap<>()
    CoBorrower6.putAll(CoBorrower6:PrsAddrres6);
    coBorrowers.putAll(CoBorrower6);
    
    def PrsAddrres7 = [PrsAddrres7: null];
    def CoBorrower7 = new HashMap<>()
    CoBorrower7.putAll(CoBorrower7:PrsAddrres7);
    coBorrowers.putAll(CoBorrower7);
    
    def PrsAddrres8 = [PrsAddrres8: null];
    def CoBorrower8 = new HashMap<>()
    CoBorrower8.putAll(CoBorrower8:PrsAddrres8);
    coBorrowers.putAll(CoBorrower8);
    
    def PrsAddrres9 = [PrsAddrres9: null];
    def CoBorrower9 = new HashMap<>()
    CoBorrower9.putAll(CoBorrower9:PrsAddrres9);
    coBorrowers.putAll(CoBorrower9);
    
    def PrsAddrres10 = [PrsAddrres10: null];
    def CoBorrower10 = new HashMap<>()
    CoBorrower10.putAll(CoBorrower10:PrsAddrres10);
    coBorrowers.putAll(CoBorrower10);
    
};
SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd")
Date nToDate = sdf.parse(contractInfo.fromdate) ;
def newToDate = nToDate.format("dd-MM-yyyy");
execution.setVariable("newToDate", newToDate)

  def clientFullName = "";
  
  if(subprocess.model.fromBcc) {
    clientFullName = subprocess.model.client.fullName
  } else {
    clientFullName = execution.getVariable("client").fullName
  }
  
def scheduleData = new HashMap<>();
scheduleData = [
LoanCode: contractInfo.code,
LoanFromDate: newToDate,
CurrentDate: myDate,
DepAddress: contractInfo.bnkadrrus1+contractInfo.bnkadrrus2,
CliAddress: contractInfo.addrrus1+contractInfo.addrrus2,
CliPhone: contractInfo.tel,
OperationFee: commision,
OperationType: "4",
FromBcc: true,
CliAcc: contractInfo.cliacc,
BankBin: contractInfo.bnkacc,
OtpConfirm: "true",
LoanInfo: [
Loaner: clientFullName,
Iin: contractInfo.taxcode,
LoanSum: subprocess.model.loanInfo.sdok.toString(),
LoanVal: contractInfo.valcode,
LoanTerm: contractInfo.ddate,
LoanGsv: contractInfo.gsv,
LoanPc: contractInfo.pc,
LoanMethod: contractInfo.meth,
],
TotalSums: [
AllsumTotal: allsumTotal,
RaschetTotal: raschetTotal,
DebtTotal: debtTotal,
SumSubsTotal: sumSubsTotal,
SumCliTotal: sumCliTotal,
CreditTotal: creditTotal,
OdPcnTotal: odPcnTotal,
],
ScheduleStruct: ScheduleStruct
];

if(coBorrowers.isEmpty() != true){
    scheduleData.putAll(coBorrowers)
}

execution.setVariable("scheduleData", scheduleData);
execution.setVariable("myDate", myDate);
} catch (Exception e) {
  execution.setVariable("messageType", "1");
  execution.setVariable("message", "Техническая ошибка в скрипте \"Парсинг графика\" ScriptTask_0wn67ye");
  
  throw new org.camunda.bpm.engine.delegate.BpmnError(e.getMessage())
}
