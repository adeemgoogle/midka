using NUnit.Framework;
using Moq;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Runtime.InteropServices; // For Marshal

namespace ASTS_BRIDGE.Models.Tests
{
    [TestFixture]
    public class ServerTests
    {
        private Mock<IConfiguration> _mockConfig;
        private Mock<Wrapper> _mockAstsServer;
        private Server _server;

        [SetUp]
        public void SetUp()
        {
            _mockConfig = new Mock<IConfiguration>();
            _mockAstsServer = new Mock<Wrapper>();

            _mockConfig.SetupGet(c => c["Asts:ServerAddress"]).Returns("127.0.0.1");
            _mockConfig.SetupGet(c => c["Asts:ServerName"]).Returns("TestServer");
            _mockConfig.SetupGet(c => c["Asts:Service"]).Returns("TestService");
            _mockConfig.SetupGet(c => c["Asts:UserId"]).Returns("TestUser");
            _mockConfig.SetupGet(c => c["Asts:Password"]).Returns("TestPassword");
            _mockConfig.SetupGet(c => c["Asts:Interface"]).Returns("TestInterface");
            _mockConfig.SetupGet(c => c["Asts:Language"]).Returns("EN");
            _mockConfig.SetupGet(c => c["Asts:Logging"]).Returns("True");
            _mockConfig.SetupGet(c => c["Asts:LogFolder"]).Returns("/logs");
            _mockConfig.SetupGet(c => c["Kafka:Topic"]).Returns("TestKafkaTopic");
            _mockConfig.SetupGet(c => c["Kafka:TopicDaily"]).Returns("TestKafkaTopicDaily");

            var mockPublicBoardsSection = new Mock<IConfigurationSection>();
            mockPublicBoardsSection.Setup(s => s[It.IsAny<string>()]).Returns("DailyBoard1 DailyBoard2" );

            var mockDailyBoardsSection = new Mock<IConfigurationSection>();
            mockDailyBoardsSection.Setup(s => s[It.IsAny<string>()]).Returns("DailyBoard1 DailyBoard2");

            _mockConfig.Setup(c => c.GetSection("PublicBoards")).Returns(mockPublicBoardsSection.Object);
            _mockConfig.Setup(c => c.GetSection("DailyBoards")).Returns(mockDailyBoardsSection.Object);

            _server = new Server(_mockConfig.Object);
            _server.AstsServer = _mockAstsServer.Object;
        }

        /*[Test]
        public void CreateNewAstsServer_Windows_CreatesAstsServer()
        {
            // Arrange
            _mockAstsServer.Setup(a => a.IsConnected).Returns(false);

            // Act
            _server.CreateNewAstsServer("Windows");

            // Assert
            Assert.IsInstanceOf<WindowsWrapper>(_server.AstsServer);
        }

        [Test]
        public void CreateNewAstsServer_Linux_CreatesAstsServer()
        {
            // Arrange
            _mockAstsServer.Setup(a => a.IsConnected).Returns(false);

            // Act
            _server.CreateNewAstsServer("Linux");

            // Assert
            Assert.IsInstanceOf<LinuxWrapper>(_server.AstsServer);
        }*/

        [Test]
        public void ReadTrades_WhenAlreadyReading_ReturnsAlreadyReadingMessage()
        {
            // Arrange
            _server.isReadingTable["TRADES"] = true;

            // Act
            var result = _server.ReadTrades();

            // Assert
            Assert.AreEqual("Already reading TRADES table", result);
        }

        [Test]
        public void ReadTrades_WhenNotReading_StartsReadingAndReturnsOK()
        {
            // Arrange
            _server.isReadingTable["TRADES"] = false;
            _mockAstsServer.Setup(a => a.IsConnected).Returns(true);

            // Act
            var result = _server.ReadTrades();

            // Assert
            Assert.AreEqual("OK", result);
            Assert.IsTrue(_server.isReadingTable["TRADES"]);
        }

        [Test]
        public void ReadOrders_WhenAlreadyReading_ReturnsAlreadyReadingMessage()
        {
            // Arrange
            _server.isReadingTable["ORDERS"] = true;

            // Act
            var result = _server.ReadOrders();

            // Assert
            Assert.AreEqual("Already reading ORDERS table", result);
        }

        [Test]
        public void ReadOrders_WhenNotReading_StartsReadingAndReturnsOK()
        {
            // Arrange
            _server.isReadingTable["ORDERS"] = false;
            _mockAstsServer.Setup(a => a.IsConnected).Returns(true);

            // Act
            var result = _server.ReadOrders();

            // Assert
            Assert.AreEqual("OK", result);
            Assert.IsTrue(_server.isReadingTable["ORDERS"]);
        }

        [Test]
        public void ReadNegdeals_WhenAlreadyReading_ReturnsAlreadyReadingMessage()
        {
            // Arrange
            _server.isReadingTable["NEGDEALS"] = true;

            // Act
            var result = _server.ReadNegdeals();

            // Assert
            Assert.AreEqual("Already reading NEGDEALS table", result);
        }

        [Test]
        public void ReadNegdeals_WhenNotReading_StartsReadingAndReturnsOK()
        {
            // Arrange
            _server.isReadingTable["NEGDEALS"] = false;
            _mockAstsServer.Setup(a => a.IsConnected).Returns(true);

            // Act
            var result = _server.ReadNegdeals();

            // Assert
            Assert.AreEqual("OK", result);
            Assert.IsTrue(_server.isReadingTable["NEGDEALS"]);
        }

        [Test]
        public unsafe void OpenTableNonString_CallsOpenTableAndReadTable()
        {
            // Arrange
            int descriptor;
           int* ptr = (int*)Marshal.AllocHGlobal(sizeof(int));

            _mockAstsServer.Setup(a => a.OpenTable(It.IsAny<string>(), It.IsAny<string>(), out descriptor)).Returns(1);
           
            _server.OpenTableNonString("TEST", null, out descriptor);

            // Assert
            _mockAstsServer.Verify(a => a.OpenTable(It.IsAny<string>(), It.IsAny<string>(), out ptr),  Times.Once);
            Marshal.FreeHGlobal((IntPtr)ptr);
        }

        [Test]
        public void CloseTable_ClosesTableAndUnlocksMutex()
        {
            // Arrange
            int tableDescriptor = 1;
            _mockAstsServer.Setup(a => a.CloseTable(tableDescriptor)).Returns(0);

            // Act
            var result = _server.CloseTable(tableDescriptor);

            // Assert
            _mockAstsServer.Verify(a => a.CloseTable(tableDescriptor), Times.Once);
            Assert.AreEqual(0, result);
        }
    }
}
