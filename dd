using ASTS_BRIDGE.Models;
using Microsoft.EntityFrameworkCore;
using Quartz;
using Quartz.Impl;
using Quartz.Spi;
using System.Runtime.InteropServices;

namespace ASTS_BRIDGE
{
public class Startup
{
    public IConfiguration Configuration { get; }

    public static Server? Server { get; set; }

    public Startup(IConfiguration configuration, IHostEnvironment env)
    {
        Console.WriteLine(env.EnvironmentName);
        configuration = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile($"appsettings.{env.EnvironmentName}.json")
            .Build();
        Configuration = configuration;
        Server = new Server(Configuration);
    }
    public void ConfigureServices(IServiceCollection services)
    {
        services.AddControllers();

        services.AddCors(options =>
        {
            options.AddDefaultPolicy(builder =>
            {
                builder.AllowAnyOrigin()
                    .AllowAnyHeader()
                    .AllowAnyMethod();
            });
        });

        services.AddSwaggerGen(c =>
        {
            c.SwaggerDoc("v1", new Microsoft.OpenApi.Models.OpenApiInfo
            {
                Version = "v1",
                Title = "Brokerage - KASE ASTS Bridge Client API",
                    Description = "Сервис для коннекта с ASTS Bridge KASE"
            });
        });
            
            services.AddSingleton<IJobFactory, SingletonJobFactory>();
            services.AddSingleton<ISchedulerFactory, StdSchedulerFactory>();
            services.AddSingleton<Server>(provider => Startup.Server);

            services.AddTransient<GetSecurityJob>();
            services.AddSingleton(new JobSchedule(
                jobType: typeof(GetSecurityJob), cronExpression: "0 21 17 * * ?"));
            services.AddHostedService<QuartzHostedService>();
        // Register Quartz services
        /*services.AddQuartz(q =>
        {
            q.UseMicrosoftDependencyInjectionJobFactory();

            var jobKey = new JobKey("GetSecurityJob");

            q.AddJob<GetSecurityJob>(opts => opts.WithIdentity(jobKey));

            q.AddTrigger(opts => opts
                .ForJob(jobKey)
                .WithIdentity("GetSecurityJob-trigger")
                .WithCronSchedule("0 0 23 * * ?")); // Every day at 23:00
        });

        services.AddQuartzService(q => q.WaitForJobsToComplete = true);

        // Register Server as a singleton
        services.AddSingleton(Server);
        */
    }

    public void Configure(IApplicationBuilder app, IWebHostEnvironment env, IHostApplicationLifetime applicationLifetime)
    {
        applicationLifetime.ApplicationStarted.Register(OnStarted);
        applicationLifetime.ApplicationStopping.Register(OnStopping);

        if (env.IsDevelopment())
        {
            app.UseDeveloperExceptionPage();
        }

        app.UseRouting();
        app.UseAuthorization();
        app.UseCors(builder =>
        {
                builder
                .AllowAnyOrigin()
                .AllowAnyMethod()
                .AllowAnyHeader();
        });
        app.UseEndpoints(endpoints =>
        {
            endpoints.MapControllers();
        });
        app.UseSwagger();
        app.UseSwaggerUI(c =>
        {
            c.SwaggerEndpoint("/swagger/v1/swagger.json", "Brokerage - KASE ASTS Bridge Client API V1");
        });
    }

    private void OnStarted()
    {
        bool isWindows = RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
            string os = isWindows switch
            {
                true => "Windows",
                false => "Linux"
            };

            Server.CreateNewAstsServer(os);
    }

    private void OnStopping()
    {
            Server.Disconnect();
        }
    }
}
public class JobSchedule
{
    public Type JobType { get; }
    public string CronExpression { get; }

    public JobSchedule(Type jobType, string cronExpression)
    {
        JobType = jobType;
        CronExpression = cronExpression;
    }
}

public class SingletonJobFactory : IJobFactory
{
    private readonly IServiceProvider _serviceProvider;

    public SingletonJobFactory(IServiceProvider serviceProvider)
    {
        _serviceProvider = serviceProvider;
    }

    public IJob NewJob(TriggerFiredBundle bundle, IScheduler scheduler)
    {
        return _serviceProvider.GetRequiredService(bundle.JobDetail.JobType) as IJob;
    }

    public void ReturnJob(IJob job) { }
}

public class QuartzHostedService : IHostedService
{
    private readonly ISchedulerFactory _schedulerFactory;
    private readonly IJobFactory _jobFactory;
    private IScheduler _scheduler;

    public QuartzHostedService(ISchedulerFactory schedulerFactory, IJobFactory jobFactory)
    {
        _schedulerFactory = schedulerFactory;
        _jobFactory = jobFactory;
    }

    public async Task StartAsync(CancellationToken cancellationToken)
    {
        _scheduler = await _schedulerFactory.GetScheduler(cancellationToken);
        _scheduler.JobFactory = _jobFactory;

        var job = JobBuilder.Create<GetSecurityJob>()
            .WithIdentity("dailyJob", "group1")
            .Build();

        var trigger = TriggerBuilder.Create()
            .WithIdentity("dailyJobTrigger", "group1")
            .WithSchedule(CronScheduleBuilder.DailyAtHourAndMinute(17, 21))
            .Build();

        await _scheduler.ScheduleJob(job, trigger, cancellationToken);
        await _scheduler.Start(cancellationToken);
    }

    public async Task StopAsync(CancellationToken cancellationToken)
    {
        if (_scheduler != null)
        {
            await _scheduler.Shutdown(cancellationToken);
        }
    }
}
public class GetSecurityJob : IJob
{
    private Server _server;

    public GetSecurityJob(Server server)
    {
        _server = server ?? throw new ArgumentNullException(nameof(server));
    }

    public Task Execute(IJobExecutionContext context)
    {
        string[] boards = _server.DailyBoards;
        string KafkaTopic = _server.DailyKafkaTopic;
        bool isDailyReport = true;
        _server.GetSecurity(boards, KafkaTopic, isDailyReport);
        Console.WriteLine("Cron is worked");
        return Task.CompletedTask;
    }
}
