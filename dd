    public List<ATM> GetAtms()
    {
        Log.Information("Loading ATM data");

        string query = "select ANLN1 as \"Number\", GSBER_TEXT as \"Filial\",KATO as \"Locality\", case when ADDR_RU = ' ' then '' else ADDR_RU END || " +
                        "case when P_ADDR_RU = ' ' then '' ELSE ', п. '|| P_ADDR_RU END || " +
                        "case when ADDR_RUS = ' ' then '' else ', '|| ADDR_RUS END as \"Adress\", " +
                        "case when ADDR_KAZ = ' ' then '' else ADDR_KAZ || ', ' END || " +
                        "case when P_ADDR_KAZ = ' ' then '' else P_ADDR_KAZ || ' ауылы, 'END || " +
                        "case when ADDR6 = ' ' then '' else ADDR6 END \"AdressKaz\", LOCATION_COMMENT as \"Location\", SIGN_CASH as \"CashIn\", SIGN_PUBLIC as \"Public\", SIGN_ALL_DAY as \"AllDay\", TIME_WORK_B as \"StartTime\", " +
                        "TIME_WORK_E as \"EndTime\", TIME_WORK_OB as \"LunchStart\", TIME_WORK_OE as \"LunchEnd\", TIME_SUB_B as \"SatStartTime\", TIME_SUB_E as \"SatEndTime\", " +
                        "TIME_SUB_OB as \"SatLunchStart\", TIME_SUB_OE as \"SatLunchEnd\", TIME_VOS_B as \"SunStartTime\", TIME_VOS_E as \"SunEndTime\", TIME_VOS_OB as \"SunLunchStart\", " +
                        "TIME_VOS_OE as \"SunLunchEnd\", RECEPT_CUR as \"CashInCurrency\", ISSUE_CUR as \"Currency\", \"WIDTH\" as \"Latitude\", \"HEIGHT\" as \"Longitude\" from sapprd.zwd_0033_main WHERE DEAKT <> 'X'";

        return GetData<ATM, ATMDb>(query, ToATM);
    }

    public List<Branch> GetBranches()
    {
        Log.Information("Loading branch data");

        string query = "select NOMER as \"Number\", \"NAME\", TYPE_KP as \"Type\", GSBER_TEXT as Filial, KATO as \"Locality\", ADRESS_KP as \"Adress\"," +
                        "case when ADRES4 = ' ' then '' else ADRES4 || ' қ, ' END ||" +
                        "case when ADRES5 = ' ' then '' else ADRES5 || ' ауылы, 'END ||" +
                        "case when ADRES6 = ' ' then '' else ADRES6 END \"AdressKaz\"," +
                        "case when ADRES4 = ' ' then '' else ADRES4 || ' қ, ' END ||" +
                        "case when ADRES5 = ' ' then '' else ADRES5 || ' ауылы, 'END ||" +
                        "case when ADRES6 = ' ' then '' else ADRES6 END \"FullAddressKaz\"," +
                        "\"LOCATION\", SWAP as CurrencyExchange, SERVICE as ServiceType, WESTERN as WesternUnion, MONEY_GRAMM as MoneyGramm," +
                        "DEPOSITORIES as Depository, PAY_TERMINAL AS Terminal, PREMIUM_HALYK as PremiumZone, TIME_WORK_B as StartTime," +
                        "TIME_WORK_E as EndTime, TIME_WORK_OB as LunchStart, TIME_WORK_OE as LunchEnd, TIME_SUB_B as SatStartTime," +
                        "TIME_SUB_E as SatEndTime, TIME_SUB_OB as SatLunchStart, TIME_SUB_OE as SatLunchEnd, TIME_VOS_B as SunStartTime," +
                        "TIME_VOS_E as SunEndTime, TIME_VOS_OB as SunLunchStart, TIME_VOS_OE as SunLunchEnd, SHIROTA as Latitude," +
                        "DOLGOTA as Longitude, TO_NUMBER(NVL(TRIM(EMBOSSER), 0)) as \"Embosser\", ADRES1 as \"CityNameRus\", ADRES4 as \"CityNameKaz\", ADRES3 as \"AddressRus\", ADRES6 as \"AddressKaz\", ADRESS_KP as \"FullAddressRus\" from sapprd.zwd_0031_main";

        return GetData<Branch, BranchDb>(query, ToBranch);
    }

    private List<T> GetData<T, T2>(string query, Func<T2, T> convertFunc)
    {
        var resultObjs = new List<T>();

        try
        {
            using (var conn = new OracleConnection(_config.GetConnectionString("sap")))
            {
                conn.Open();
                var objDbs = conn.Query<T2>(query);
                resultObjs = objDbs.Select(o => convertFunc(o)).AsList();
            }
        }
        catch (Exception e)
        {
            Log.Error(e, "Cannot load corresponding data");
            SentrySdk.CaptureException(e);

            throw e;
        }

        SentrySdk.AddBreadcrumb("Data aquired", category: convertFunc.Method.Name, level: BreadcrumbLevel.Debug);
        Log.Information("Loaded corresponding data");
        return resultObjs;
    }

    private ATM ToATM(ATMDb adb)
    {
        bool cashInUSD = false;
        bool cashInEUR = false;
        bool cashInRUB = false;
        bool cashOutUSD = false;
        bool cashOutEUR = false;
        bool cashOutRUB = false;

        if (adb.CashInCurrency.ToUpper().Contains("USD"))
        {
            cashInUSD = true;
        }

        if (adb.CashInCurrency.ToUpper().Contains("EUR"))
        {
            cashInEUR = true;
        }

        if (adb.CashInCurrency.ToUpper().Contains("RUB"))
        {
            cashInRUB = true;
        }

        if (adb.Currency.ToUpper().Contains("USD"))
        {
            cashOutUSD = true;
        }

        if (adb.Currency.ToUpper().Contains("EUR"))
        {
            cashOutEUR = true;
        }

        if (adb.Currency.ToUpper().Contains("RUB"))
        {
            cashOutRUB = true;
        }

        return new ATM()
        {
            Id = adb.Number,
            Filial = adb.Filial,
            Locality = GetKATOName(adb.Locality),
            KatoCode = adb.Locality,
            Adress = adb.Adress,
            AdressKaz = adb.AdressKaz,
            Location = adb.Location,
            CashInFlag = adb.CashIn == "1" ? true : false,
            CashInCurrencyUSD = cashInUSD,
            CashInCurrencyEUR = cashInEUR,
            CashInCurrencyRUB = cashInRUB,
            CashOutCurrencyUSD = cashOutUSD,
            CashOutCurrencyEUR = cashOutEUR,
            CashOutCurrencyRUB = cashOutRUB,
            PublicFlag = adb.Public == "1" ? true : false,
            AllDayFlag = adb.AllDay == "1" ? true : false,
            WeekdayTime = new WorkTime()
            {
                StartTime = adb.StartTime,
                EndTime = adb.EndTime,
                LunchStart = adb.LunchStart,
                LunchEnd = adb.LunchEnd
            },
            SaturdayWorkTime = new WorkTime()
            {
                StartTime = adb.SatStartTime,
                EndTime = adb.SatEndTime,
                LunchStart = adb.SatLunchStart,
                LunchEnd = adb.SatLunchEnd
            },
            SundayWorkTime = new WorkTime()
            {
                StartTime = adb.SunStartTime,
                EndTime = adb.SunEndTime,
                LunchStart = adb.SunLunchStart,
                LunchEnd = adb.SunLunchEnd
            },
            CurrentWork = true,
            Currency = adb.Currency.Split(";").AsList(),
            CashInCurrency = adb.CashInCurrency.Split(";").AsList(),
            GetLocation = new GeoLocation(ParseToDouble(adb.Latitude), ParseToDouble(adb.Longitude))

        };
    }

    private Branch ToBranch(BranchDb branchDb)
    {
        return new Branch()
        {
            Id = branchDb.Number,
            Name = branchDb.Name,
            Type = branchDb.Type,
            Filial = branchDb.Filial,
            Locality = GetKATOName(branchDb.Locality),
            KatoCode = branchDb.Locality,
            Adress = branchDb.Adress,
            AdressKaz = branchDb.AdressKaz,
            Location = branchDb.Location,
            CurrencyExchangeFlag = branchDb.CurrencyExchange == "1" ? true : false,
            CorporateEntityFlag = branchDb.ServiceType.ToLower().Contains("юл"),
            PersonEntityFlag = branchDb.ServiceType.ToLower().Contains("фл"),
            WesternUnionFlag = branchDb.WesternUnion == "1" ? true : false,
            MoneyGrammFlag = branchDb.MoneyGramm == "1" ? true : false,
            DepositoryFlag = branchDb.Depository == "нет" ? false : true,
            TerminalFlag = branchDb.Terminal == "1" ? true : false,
            PremiumZoneFlag = branchDb.PremiumZone == " " ? false : true,
            Embosser = branchDb.Embosser > 0 ? true : false,
            AllDayFlag = false,
            Address = new Address()
            {
                Local = new IntLanguage()
                {
                    Kz = branchDb.AddressKaz,
                    Ru = branchDb.AddressRus
                },
                City = new IntLanguage()
                {
                    Kz = branchDb.CityNameKaz,
                    Ru = branchDb.CityNameRus
                },
                Full = new IntLanguage()
                {
                    Kz = branchDb.FullAddressKaz,
                    Ru = branchDb.FullAddressRus
                },
            },
            WeekdayTime = new WorkTime()
            {
                StartTime = branchDb.StartTime,
                EndTime = branchDb.EndTime,
                LunchStart = branchDb.LunchStart,
                LunchEnd = branchDb.LunchEnd
            },
            SaturdayWorkTime = new WorkTime()
            {
                StartTime = branchDb.SatStartTime,
                EndTime = branchDb.SatEndTime,
                LunchStart = branchDb.SatLunchStart,
                LunchEnd = branchDb.SatLunchEnd
            },
            SundayWorkTime = new WorkTime()
            {
                StartTime = branchDb.SunStartTime,
                EndTime = branchDb.SunEndTime,
                LunchStart = branchDb.SunLunchStart,
                LunchEnd = branchDb.SunLunchEnd
            },
            CurrentWork = true,
            GetLocation = new GeoLocation(ParseToDouble(branchDb.Latitude), ParseToDouble(branchDb.Longitude))
        };
    }

    private double ParseToDouble(string s)
    {
        string norm = s.Replace(",", ".");
        double.TryParse(norm, NumberStyles.Number, culture, out double res);

        return res;
    }

    private string GetKATOName(string code)
    {
        if (usingKatos == null)
        {
            usingKatos = new List<KATO>();
        }

        string res = "";

        if (_katoRef.TryGetValue(code, out KATO obj))
        {
            res = obj.NameRus;
            usingKatos.Add(obj);
        }
        return res;
    }
}


переделай на го
