using System.Text;
using static ASTS_BRIDGE.Models.Decoder;
using static ASTS_BRIDGE.Models.SymbolDictionary;
using Newtonsoft.Json;

namespace ASTS_BRIDGE.Models
{
    public class Server
    {
        public Server(IConfiguration Configuration)
        {
            ServerAddress = Configuration["Asts:ServerAddress"];
            ServerName = Configuration["Asts:ServerName"];
            Service = Configuration["Asts:Service"];
            UserId = Configuration["Asts:UserId"];
            Password = Configuration["Asts:Password"];
            Interface = Configuration["Asts:Interface"];
            Language = Configuration["Asts:Language"];
            Logging = Configuration["Asts:Logging"];
            LogFolder = Configuration["Asts:LogFolder"];
            SecuritiesKafkaTopic = Configuration["Kafka:Topic"];
            DailyKafkaTopic = Configuration["Kafka:TopicDaily"];
            PublicBoards = Configuration.GetSection("PublicBoards").Get<string[]>();
            DailyBoards = Configuration.GetSection("DailyBoards").Get<string[]>();
            Config = Configuration;
            mut = new Mutex();
            isReadingTable = new Dictionary<string, bool>()
            {
                { "NEGDEALS", false},
                { "ORDERS", false},
                { "TRADES", false}
            };
        }

#if DEV
        public const string Folder = "lib/dev";
#else
        public const string Folder = "lib/prod";
#endif

        private Mutex mut;

        public IConfiguration Config { get; set; }

        public string ServerAddress { get; set; }
        
        public string[] PublicBoards { get; set;}
        
        public string[] DailyBoards { get; set; }
        public string ServerName { get; set; }

        public string Service { get; set; }

        public string UserId { get; set; }

        public string Password { get; set; }

        public string Interface { get; set; }

        public string Language { get; set; }

        public string Logging { get; set; }

        public string LogFolder { get; set; }

        public string SecuritiesKafkaTopic { get; set; }
        
        public string DailyKafkaTopic { get; set; }
        
        public Wrapper AstsServer;

        public Dictionary<string, bool> isReadingTable { get; set; }

        public void CreateNewAstsServer(string os)
        {
            if (AstsServer == null)
            {
                AstsServer = os switch
                {
                    "Windows" => new WindowsWrapper(),
                    _ => new LinuxWrapper()
                };
            }

            Connect();
            Kafka.Init(Config);
            ExecuteStructure();
        }

        private void Connect()
        {
            StringBuilder settings = new StringBuilder();

            if (Service != null)
            {
                settings.Append("SERVICE=" + Service + "\r\n");
                settings.Append("BROADCAST=" + ServerAddress + "\r\n");
                settings.Append("IFACENAME=" + Interface + "\r\n");
            } else
            {
                settings.Append("HOST=" + ServerAddress + "\r\n");
                settings.Append("INTERFACE=" + Interface + "\r\n");
            }
            
            settings.Append("SERVER=" + ServerName + "\r\n");
            settings.Append("USERID=" + UserId + "\r\n");
            settings.Append("PASSWORD=" + Password + "\r\n");
            settings.Append("LOGGING=" + Logging + "\r\n");
            settings.Append("LOGFOLDER=" + LogFolder + "\r\n");
            settings.Append("LANGUAGE=" + Language + "\r\n");

            int attempt = 5;
            while (attempt > 0)
            {
                if (AstsServer.IsConnected)
                {
                    break;
                }

                AstsServer.Connect(settings);
                Thread.Sleep(1 % (attempt + 1) * 1000);
                attempt--;
            }
        }

        public void Disconnect()
        {
            AstsServer.Disconnect();
        }

        private void ExecuteStructure()
        {
            AstsServer.ExecuteStructure();
            Thread myThread = new Thread(GetUpdates);
            myThread.Start();
        }

        public string ReadTrades()
        {
            if (isReadingTable["TRADES"])
            {
                return "Already reading TRADES table";
            }
            checkConnection();

            isReadingTable["TRADES"] = true;
            Thread thread = new Thread(WriteTrades);
            thread.Start();

            return "OK";
        }

        private void WriteTrades()
        {
            Console.WriteLine("starting read TRADES table...");
            int tableDescriptor;
            var table = OpenTableNonString("TRADES", null, out tableDescriptor);
            var trades = TradeTable.ParseTradesFromUniversalTable(table);
            if (trades.Rows != null && trades.Rows.Count != 0)
            {
                var partitions = trades.Rows.partition(500);
                foreach (var partition in partitions)
                {
                    TradeTable tradeTable = new TradeTable(table.Name, table.Ref);
                    tradeTable.Rows = (List<TradeRow>)partition;
                    var jsonStr = JsonConvert.SerializeObject(tradeTable);
                    Kafka.Write("BROKERAGE-KASE-ASTS-ALLOCATIONS", "TRADES", jsonStr);
                }

                Console.WriteLine("TRADES table was written to Kafka succesfully");
                isReadingTable["TRADES"] = false;
            }
            else
            {
                Console.WriteLine("TRADES table is empty");
                isReadingTable["TRADES"] = false;
            }
        }

        public string ReadOrders()
        {
            if (isReadingTable["ORDERS"])
            {
                return "Already reading ORDERS table";
            }
            checkConnection();

            isReadingTable["ORDERS"] = true;
            Thread thread = new Thread(WriteOrders);
            thread.Start();

            return "OK";
        }

        private void WriteOrders()
        {
            Console.WriteLine("starting read ORDERS table...");
            int tableDescriptor;
            var table = OpenTableNonString("ORDERS", null, out tableDescriptor);
            var orders = OrderTable.ParseOrdersFromUniversalTable(table);
            if (orders.Rows != null && orders.Rows.Count != 0)
            {
                var partitions = orders.Rows.partition(500);
                foreach (var partition in partitions)
                {
                    OrderTable orderTable = new OrderTable(table.Name, table.Ref);
                    orderTable.Rows = (List<OrderRow>)partition;
                    var jsonStr = JsonConvert.SerializeObject(orderTable);
                    Kafka.Write("BROKERAGE-KASE-ASTS-ALLOCATIONS", "ORDERS", jsonStr);
                }

                Console.WriteLine("ORDERS table was written to Kafka succesfully");
                isReadingTable["ORDERS"] = false;
            }
            else
            {
                Console.WriteLine("ORDERS table is empty");
                isReadingTable["ORDERS"] = false;
            }
        }

        public string ReadNegdeals()
        {
            if (isReadingTable["NEGDEALS"])
            {
                return "Already reading NEGDEALS table";
            }
            checkConnection();

            isReadingTable["NEGDEALS"] = true;
            Thread myThread = new Thread(WriteNegdeals);
            myThread.Start();

            return "OK";
        }

        public void WriteNegdeals()
        {
            Console.WriteLine("starting read NEGDEALS table...");
            int tableDescriptor;
            var table = OpenTableNonString("NEGDEALS", null, out tableDescriptor);
            var negdeals = NegdealTable.ParseNegdealsFromUniversalTable(table);
            if (negdeals.Rows != null && negdeals.Rows.Count != 0)
            {
                var partitions = negdeals.Rows.partition(500);
                foreach (var partition in partitions)
                {
                    NegdealTable negdealTable = new NegdealTable(table.Name, table.Ref);
                    negdealTable.Rows = (List<NegdealRow>)partition;
                    var jsonStr = JsonConvert.SerializeObject(negdealTable);
                    Kafka.Write("BROKERAGE-KASE-ASTS-ALLOCATIONS", "NEGDEALS", jsonStr);
                }

                Console.WriteLine("NEGDEALS table was written to Kafka succesfully");
                isReadingTable["NEGDEALS"] = false;
            }
            else
            {
                Console.WriteLine("NEGDEALS table is empty");
                isReadingTable["NEGDEALS"] = false;
            }
        }

        public unsafe UniversalTable OpenTableNonString(string name, string par, out int descriptor)
        {
            UniversalTable table;
            int sdvig;

            mut.WaitOne();
            descriptor = AstsServer.OpenTable(name, par, out AstsServer.ptr);
            mut.ReleaseMutex();

            table = ReadTable(AstsServer.ptr, out AstsServer.ptr, 0, out sdvig, name, AstsServer.tables);

            return table;
        }

        public int CloseTable(int tableDescriptor)
        {
            mut.WaitOne();
            var table = AstsServer.CloseTable(tableDescriptor);
            mut.ReleaseMutex();
            return table;
        }

        public unsafe void GetOrderBook(SymbolDictionary d)
        {
            int tableDescriptor;
            UniversalTable table;
            int sdvig;

            string name = d.symbol;
            if (name == "SHY US EQUITY"){
                return;
            }
            string par = d.boardCode;
            while (name.Length < 12)
            {
                name += " ";
            }
            par += name + "10";

            table = OpenTableNonString("EXT_ORDERBOOK", par, out tableDescriptor);

            var books = Book.ParseBooksFromUniversalTable(table.Rows);

            if (books.Count > 1)
            {
                var jsonStr = JsonConvert.SerializeObject(books);
                Kafka.Write("BROKERAGE-KASE-ORDERBOOK", d.externalId, jsonStr);
            }

            CloseTable(tableDescriptor);
        }

        public unsafe void GetSecurity(string[] Boards, string KafkaTopic, bool isDailyReport)
        {
            int tableDescriptor;
            UniversalTable table;
            int sdvig;
            //= { "EQBD", "EQBR", "TQBD", "TQBR", "TQKR", "TQKD", "TQOG" };
            
            string par;
            SecurityTable res = new SecurityTable("", 0);
            res.Rows = new List<SecurityRow>();

            foreach (string board in Boards){
                par = "    " + board;

                table = OpenTableNonString("SECURITIES", par, out tableDescriptor);
                if (table.Rows.Count == 0){
                    continue;
                }

                
                if (isDailyReport)
                {
                    var securitiesFromUniversalTable = SecurityTable.ParseDailySecuritiesFromUniversalTable(table);
                    foreach (var row in securitiesFromUniversalTable.RowsDictionary)
                    {
                        res.Rows.Add(row.Value);
                    }   
                }
                else
                {
                    var securities = SecurityTable.ParseSecuritiesFromUniversalTable(table);
                    foreach(var row in securities.RowsDictionary)
                    {
                        res.Rows.Add(row.Value);
                    }
                }

                CloseTable(tableDescriptor);
            }

            if (res.Rows.Count > 1)
            {
                var jsonStr = JsonConvert.SerializeObject(res.Rows);
                Kafka.Write(KafkaTopic, "SECURITIES", jsonStr);
            }
        }

        public unsafe void GetUpdates()
        {
            while (true)
            {
                GetSecurity(PublicBoards, SecuritiesKafkaTopic, false);
                GetSecurity(DailyBoards, DailyKafkaTopic, true);
                var dictionaries = GetDictionaries(Config["SPM:Host"]);
                foreach (var d in dictionaries)
                {
                    GetOrderBook(d);
                }
                
                Thread.Sleep(15000);
            }
        }

        private void checkConnection()
        {
            AstsServer.ConnectionStatus();
            if (!AstsServer.IsConnected)
            {
                Connect();
            }
        }
    }
}

using NUnit.Framework;
using Moq;
using ASTS_BRIDGE.Models;
using Microsoft.Extensions.Configuration;

namespace ASTS_BRIDGE.Tests
{
    [TestFixture]
    public class ServerTests
    {
        [Test]
        public void ReadTrades_AlreadyReadingTradesTable_ReturnsErrorMessage()
        {
            // Arrange
            var configuration = MockConfiguration();
            var server = new Server(configuration.Object);
            server.isReadingTable["TRADES"] = true;

            // Act
            string result = server.ReadTrades();

            // Assert
            Assert.AreEqual("Already reading TRADES table", result);
        }

        [Test]
        public void ReadOrders_AlreadyReadingOrdersTable_ReturnsErrorMessage()
        {
            // Arrange
            var configuration = MockConfiguration();
            var server = new Server(configuration.Object);
            server.isReadingTable["ORDERS"] = true;

            // Act
            string result = server.ReadOrders();

            // Assert
            Assert.AreEqual("Already reading ORDERS table", result);
        }

        [Test]
        public void ReadNegdeals_AlreadyReadingNegdealsTable_ReturnsErrorMessage()
        {
            // Arrange
            var configuration = MockConfiguration();
            var server = new Server(configuration.Object);
            server.isReadingTable["NEGDEALS"] = true;

            // Act
            string result = server.ReadNegdeals();

            // Assert
            Assert.AreEqual("Already reading NEGDEALS table", result);
        }

        // Additional tests for other methods can be added similarly

        private Mock<IConfiguration> MockConfiguration()
        {
            var configuration = new Mock<IConfiguration>();
            configuration.Setup(c => c["Asts:ServerAddress"]).Returns("example.server");
            configuration.Setup(c => c["Asts:ServerName"]).Returns("example_server");
            configuration.Setup(c => c["Asts:Service"]).Returns("example_service");
            configuration.Setup(c => c["Asts:UserId"]).Returns("example_user");
            configuration.Setup(c => c["Asts:Password"]).Returns("example_password");
            configuration.Setup(c => c["Asts:Interface"]).Returns("example_interface");
            configuration.Setup(c => c["Asts:Language"]).Returns("example_language");
            configuration.Setup(c => c["Asts:Logging"]).Returns("example_logging");
            configuration.Setup(c => c["Asts:LogFolder"]).Returns("example_log_folder");
            configuration.Setup(c => c["Kafka:Topic"]).Returns("example_securities_topic");
            configuration.Setup(c => c["Kafka:TopicDaily"]).Returns("example_daily_topic");
            return configuration;
        }
    }
}
