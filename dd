using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using StackExchange.Redis;

class Program
{
    private static IConfiguration _config;

    static async Task<int> Main(string[] args)
    {
        try
        {
            var host = CreateHostBuilder(args).Build();
            await host.RunAsync();
            return 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Host terminated unexpectedly: {ex.Message}");
            return 1;
        }
    }

    static IHostBuilder CreateHostBuilder(string[] args) =>
        Host.CreateDefaultBuilder(args)
            .ConfigureServices((hostContext, services) =>
            {
                _config = hostContext.Configuration;
                
                // Register SlaveService
                services.AddSingleton<SlaveService>();

                // Register QuartzHostedService with jobs
                services.AddSingleton<IHostedService, QuartzHostedService>(provider =>
                {
                    var jobSchedules = new List<JobSchedule>
                    {
                        new JobSchedule(typeof(MyJob), "0 0 * * * ?") // Run every 1 hour
                    };

                    return new QuartzHostedService(provider.GetService<ISchedulerFactory>(),
                                                   provider.GetService<IJobFactory>(),
                                                   jobSchedules);
                });

                // Add Redis ConnectionMultiplexer as singleton
                services.AddSingleton<IConnectionMultiplexer>(provider =>
                {
                    var connectionString = _config.GetConnectionString("RedisConnection");
                    return ConnectionMultiplexer.Connect(connectionString);
                });

                // Add logging
                services.AddLogging();
            });

    public class SlaveService
    {
        private readonly IConnectionMultiplexer _redis;
        private readonly string _serviceName;
        private readonly int _db;
        private readonly Random _random = new Random();

        public SlaveService(IConnectionMultiplexer redis, IConfiguration config)
        {
            _redis = redis;
            _serviceName = config["Redis:ServiceName"];
            _db = int.Parse(config["Redis:Database"]);
        }

        public async Task CheckAsync(CancellationToken cancellationToken)
        {
            while (!cancellationToken.IsCancellationRequested)
            {
                if (IsMasterDead())
                {
                    await BecomeMasterAsync(cancellationToken);
                    return;
                }
                await Task.Delay(30 * 1000, cancellationToken); // 30 seconds delay
            }
        }

        private bool IsMasterDead()
        {
            var db = _redis.GetDatabase(_db);
            var res = db.StringGet(_serviceName);
            return res.IsNullOrEmpty;
        }

        private async Task BecomeMasterAsync(CancellationToken cancellationToken)
        {
            while (!cancellationToken.IsCancellationRequested)
            {
                await UpdateStatusAsync(cancellationToken);
                await Task.Delay(10 * 1000, cancellationToken); // 10 seconds delay
            }
        }

        private async Task UpdateStatusAsync(CancellationToken cancellationToken)
        {
            var db = _redis.GetDatabase(_db);
            var id = Guid.NewGuid().ToString();
            await db.StringSetAsync(_serviceName, id, TimeSpan.FromSeconds(30));
        }
    }

    public class MyJob : IJob
    {
        private readonly SlaveService _slaveService;

        public MyJob(SlaveService slaveService)
        {
            _slaveService = slaveService;
        }

        public async Task Execute(IJobExecutionContext context)
        {
            try
            {
                await _slaveService.CheckAsync(context.CancellationToken);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in job execution: {ex.Message}");
            }
        }
    }

    public class QuartzHostedService : IHostedService
    {
        private readonly ISchedulerFactory _schedulerFactory;
        private readonly IJobFactory _jobFactory;
        private readonly IEnumerable<JobSchedule> _jobSchedules;
        private IScheduler _scheduler;

        public QuartzHostedService(ISchedulerFactory schedulerFactory, IJobFactory jobFactory, IEnumerable<JobSchedule> jobSchedules)
        {
            _schedulerFactory = schedulerFactory;
            _jobFactory = jobFactory;
            _jobSchedules = jobSchedules;
        }

        public async Task StartAsync(CancellationToken cancellationToken)
        {
            _scheduler = await _schedulerFactory.GetScheduler(cancellationToken);
            _scheduler.JobFactory = _jobFactory;

            foreach (var jobSchedule in _jobSchedules)
            {
                var job = CreateJob(jobSchedule);
                var trigger = CreateTrigger(jobSchedule);

                await _scheduler.ScheduleJob(job, trigger, cancellationToken);
            }

            await _scheduler.Start(cancellationToken);
            Console.WriteLine("Quartz scheduler started.");
        }

        public async Task StopAsync(CancellationToken cancellationToken)
        {
            if (_scheduler != null)
            {
                await _scheduler.Shutdown(cancellationToken);
                Console.WriteLine("Quartz scheduler stopped.");
            }
        }

        private IJobDetail CreateJob(JobSchedule schedule)
        {
            var jobType = schedule.JobType;
            return JobBuilder.Create(jobType)
                             .WithIdentity(jobType.FullName)
                             .WithDescription(jobType.Name)
                             .Build();
        }

        private ITrigger CreateTrigger(JobSchedule schedule)
        {
            return TriggerBuilder.Create()
                                 .WithIdentity($"{schedule.JobType.FullName}.trigger")
                                 .WithCronSchedule(schedule.CronExpression)
                                 .WithDescription(schedule.CronExpression)
                                 .Build();
        }
    }

    public class JobSchedule
    {
        public JobSchedule(Type jobType, string cronExpression)
        {
            JobType = jobType;
            CronExpression = cronExpression;
        }

        public Type JobType { get; }
        public string CronExpression { get; }
    }
}
