:"Process error: ","@i":"1323b270","@l":"Error","@x":"System.InvalidOperationException: Parameter 'Adress' must have its value set\r\n   at Npgsql.NpgsqlParameter.ResolveHandler(ConnectorTypeMapper typeMapper) in C:\\projects\\npgsql\\src\\Npgsql\\NpgsqlParameter.cs:line 531\r\n   at Npgsql.NpgsqlCommand.ValidateParameters()
using System;
using System.Collections.Generic;
using Npgsql;
using Serilog;

public class PostgreSQLService
{
    private string _postgresConnectionString;

    public PostgreSQLService(string postgresConnectionString)
    {
        _postgresConnectionString = postgresConnectionString;
    }

    public void AddATMs(List<ATM> atms)
    {
        Log.Information("Adding ATM data to PostgreSQL");

        string query = @"
            INSERT INTO atm (id, filial, locality, address, address_kaz, location, cashin_flag, public_flag, allday_flag,
                             start_time, end_time, lunch_start, lunch_end, sat_start_time, sat_end_time, sat_lunch_start, sat_lunch_end,
                             sun_start_time, sun_end_time, sun_lunch_start, sun_lunch_end, cashin_currency, currency, lat, lng)
            VALUES (@Id, @Filial, @Locality, @Address, @AddressKaz, @Location, @CashInFlag, @PublicFlag, @AllDayFlag,
                    @StartTime, @EndTime, @LunchStart, @LunchEnd, @SatStartTime, @SatEndTime, @SatLunchStart, @SatLunchEnd,
                    @SunStartTime, @SunEndTime, @SunLunchStart, @SunLunchEnd, @CashInCurrency, @Currency, @Lat, @Lng)";

        using (var connection = new NpgsqlConnection(_postgresConnectionString))
        {
            connection.Open();
            foreach (var atm in atms)
            {
                using (var command = new NpgsqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("Id", (object)atm.Id ?? DBNull.Value);
                    command.Parameters.AddWithValue("Filial", (object)atm.Filial ?? DBNull.Value);
                    command.Parameters.AddWithValue("Locality", (object)atm.Locality ?? DBNull.Value);
                    command.Parameters.AddWithValue("Address", (object)atm.Address ?? DBNull.Value);
                    command.Parameters.AddWithValue("AddressKaz", (object)atm.AddressKaz ?? DBNull.Value);
                    command.Parameters.AddWithValue("Location", (object)atm.Location ?? DBNull.Value);
                    command.Parameters.AddWithValue("CashInFlag", atm.CashInFlag);
                    command.Parameters.AddWithValue("PublicFlag", atm.PublicFlag);
                    command.Parameters.AddWithValue("AllDayFlag", atm.AllDayFlag);
                    command.Parameters.AddWithValue("StartTime", (object)atm.WeekdayTime.StartTime ?? DBNull.Value);
                    command.Parameters.AddWithValue("EndTime", (object)atm.WeekdayTime.EndTime ?? DBNull.Value);
                    command.Parameters.AddWithValue("LunchStart", (object)atm.WeekdayTime.LunchStart ?? DBNull.Value);
                    command.Parameters.AddWithValue("LunchEnd", (object)atm.WeekdayTime.LunchEnd ?? DBNull.Value);
                    command.Parameters.AddWithValue("SatStartTime", (object)atm.SaturdayWorkTime.StartTime ?? DBNull.Value);
                    command.Parameters.AddWithValue("SatEndTime", (object)atm.SaturdayWorkTime.EndTime ?? DBNull.Value);
                    command.Parameters.AddWithValue("SatLunchStart", (object)atm.SaturdayWorkTime.LunchStart ?? DBNull.Value);
                    command.Parameters.AddWithValue("SatLunchEnd", (object)atm.SaturdayWorkTime.LunchEnd ?? DBNull.Value);
                    command.Parameters.AddWithValue("SunStartTime", (object)atm.SundayWorkTime.StartTime ?? DBNull.Value);
                    command.Parameters.AddWithValue("SunEndTime", (object)atm.SundayWorkTime.EndTime ?? DBNull.Value);
                    command.Parameters.AddWithValue("SunLunchStart", (object)atm.SundayWorkTime.LunchStart ?? DBNull.Value);
                    command.Parameters.AddWithValue("SunLunchEnd", (object)atm.SundayWorkTime.LunchEnd ?? DBNull.Value);
                    command.Parameters.AddWithValue("CashInCurrency", (object)(atm.CashInCurrency != null ? string.Join(";", atm.CashInCurrency) : DBNull.Value));
                    command.Parameters.AddWithValue("Currency", (object)(atm.Currency != null ? string.join(";", atm.Currency) : DBNull.Value));
                    command.Parameters.AddWithValue("Lat", atm.GetLocation.Lat);
                    command.Parameters.AddWithValue("Lng", atm.GetLocation.Lng);

                    command.ExecuteNonQuery();
                }
            }
        }

        Log.Information("ATM data added to PostgreSQL");
    }

    public void AddBranches(List<Branch> branches)
    {
        Log.Information("Adding branch data to PostgreSQL");

        string query = @"
            INSERT INTO branch (id, name, type, filial, locality, address, address_kaz, location, currency_exchange_flag, 
                                corporate_entity_flag, person_entity_flag, western_union_flag, money_gramm_flag, depository_flag, 
                                terminal_flag, premium_zone_flag, embosser, city_name_rus, city_name_kaz, address_rus, address_kaz, 
                                full_address_rus, full_address_kaz, start_time, end_time, lunch_start, lunch_end, sat_start_time, 
                                sat_end_time, sat_lunch_start, sat_lunch_end, sun_start_time, sun_end_time, sun_lunch_start, 
                                sun_lunch_end, lat, lng)
            VALUES (@Id, @Name, @Type, @Filial, @Locality, @Address, @AddressKaz, @Location, @CurrencyExchangeFlag, 
                    @CorporateEntityFlag, @PersonEntityFlag, @WesternUnionFlag, @MoneyGrammFlag, @DepositoryFlag, 
                    @TerminalFlag, @PremiumZoneFlag, @Embosser, @CityNameRus, @CityNameKaz, @AddressRus, @AddressKaz, 
                    @FullAddressRus, @FullAddressKaz, @StartTime, @EndTime, @LunchStart, @LunchEnd, @SatStartTime, 
                    @SatEndTime, @SatLunchStart, @SatLunchEnd, @SunStartTime, @SunEndTime, @SunLunchStart, 
                    @SunLunchEnd, @Lat, @Lng)";

        using (var connection = new NpgsqlConnection(_postgresConnectionString))
        {
            connection.Open();
            foreach (var branch in branches)
            {
                using (var command = new NpgsqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("Id", (object)branch.Id ?? DBNull.Value);
                    command.Parameters.AddWithValue("Name", (object)branch.Name ?? DBNull.Value);
                    command.Parameters.AddWithValue("Type", (object)branch.Type ?? DBNull.Value);
                    command.Parameters.AddWithValue("Filial", (object)branch.Filial ?? DBNull.Value);
                    command.Parameters.AddWithValue("Locality", (object)branch.Locality ?? DBNull.Value);
                    command.Parameters.AddWithValue("Address", (object)branch.Address ?? DBNull.Value);
                    command.Parameters.AddWithValue("AddressKaz", (object)branch.AddressKaz ?? DBNull.Value);
                    command.Parameters.AddWithValue("Location", (object)branch.Location ?? DBNull.Value);
                    command.Parameters.AddWithValue("CurrencyExchangeFlag", branch.CurrencyExchangeFlag);
                    command.Parameters.AddWithValue("CorporateEntityFlag", branch.CorporateEntityFlag);
                    command.Parameters.AddWithValue("PersonEntityFlag", branch.PersonEntityFlag);
                    command.Parameters.AddWithValue("WesternUnionFlag", branch.WesternUnionFlag);
                    command.Parameters.AddWithValue("MoneyGrammFlag", branch.MoneyGrammFlag);
                    command.Parameters.AddWithValue("DepositoryFlag", branch.DepositoryFlag);
                    command.Parameters.AddWithValue("TerminalFlag", branch.TerminalFlag);
                    command.Parameters.AddWithValue("PremiumZoneFlag", branch.PremiumZoneFlag);
                    command.Parameters.AddWithValue("Embosser", branch.Embosser);
                    command.Parameters.AddWithValue("CityNameRus", (object)branch.Address.City.Ru ?? DBNull.Value);
                    command.Parameters.AddWithValue("CityNameKaz", (object)branch.Address.City.Kz ?? DBNull.Value);
                    command.Parameters.AddWithValue("AddressRus", (object)branch.Address.Local.Ru ?? DBNull.Value);
                    command.Parameters.AddWithValue("AddressKaz", (object)branch.Address.Local.Kz ?? DBNull.Value);
                    command.Parameters.AddWithValue("FullAddressRus", (object)branch.Address.Full.Ru ?? DBNull.Value);
                    command.Parameters.AddWithValue("FullAddressKaz", (object)branch.Address.Full.Kz ?? DBNull.Value);
                    command.Parameters.AddWithValue("StartTime", (object)branch.WeekdayTime.StartTime ?? DBNull.Value);
                    command.Parameters.AddWithValue("EndTime", (object)branch.WeekdayTime.EndTime ?? DBNull.Value);
                    command.Parameters.AddWithValue("LunchStart", (object)branch.WeekdayTime.LunchStart ?? DBNull.Value);
                    command.Parameters.AddWithValue("LunchEnd", (object)branch.WeekdayTime.LunchEnd ?? DBNull.Value);
                    command.Parameters.AddWithValue("SatStartTime", (object)branch.SaturdayWorkTime.StartTime ?? DBNull.Value);
                    command.Parameters.AddWithValue("SatEndTime", (object)branch.SaturdayWorkTime.EndTime ?? DBNull.Value);
                    command.Parameters.AddWithValue("SatLunchStart", (object)branch.SaturdayWorkTime.LunchStart ?? DBNull.Value);
                    command.Parameters.AddWithValue("SatLunchEnd", (object)branch.SaturdayWorkTime.LunchEnd ?? DBNull.Value);
                    command.Parameters.AddWithValue("SunStartTime", (object)branch.SundayWorkTime.StartTime ?? DBNull.Value);
                    command.Parameters.AddWithValue("SunEndTime", (object)branch.SundayWork
