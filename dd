using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Quartz;
using Quartz.Impl;
using Quartz.Spi;
using Serilog;
using Serilog.Events;
using Sentry;
using Serilog.Formatting.Compact;
using TradePointsLoader.Repository;
using TradePointsLoader.Service;
using Microsoft.AspNetCore.Hosting;
using TradePointsLoader.Controllers;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

class Program
{
    private static readonly IConfiguration _config = new ConfigurationBuilder()
        .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
        .AddJsonFile("appsettings.json")
        .AddEnvironmentVariables()
        .Build();

    static async Task<int> Main(string[] args)
    {
        ConfigureLogging();

        try
        {
            var host = CreateWebHostBuilder(args).Build();
            await host.RunAsync();
            return 0;
        }
        catch (Exception ex)
        {
            Log.Fatal(ex, "Host terminated unexpectedly");
            return 1;
        }
        finally
        {
            Log.CloseAndFlush();
        }
    }

    static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
        new WebHostBuilder()
            .UseKestrel()
            .UseUrls("http://localhost:8080/")
            .UseConfiguration(_config)
            .ConfigureServices(ConfigureServices)
            .UseStartup<Startup>()
            .ConfigureLogging(logging =>
            {
                logging.ClearProviders();
                logging.AddSerilog();
            });

    static void ConfigureServices(IServiceCollection services)
    {
        services.AddHealthChecks();
        services.AddSingleton<HealthzController>();
        services.AddSingleton<IJobFactory, SingletonJobFactory>();
        services.AddSingleton<ISchedulerFactory, StdSchedulerFactory>();

        // Add our job
        services.AddSingleton<MyJob>();
        services.AddSingleton(new JobSchedule(
            jobType: typeof(MyJob),
            cronExpression: "0 55 16 * * ?")); // Run every 1 hour

        services.AddHostedService<QuartzHostedService>();
    }

    static void ConfigureLogging()
    {
        Log.Logger = new LoggerConfiguration()
            .WriteTo.Console(restrictedToMinimumLevel: LogEventLevel.Debug, formatter: new RenderedCompactJsonFormatter())
            .CreateLogger();
    }

    public class MyJob : IJob
    {
        private readonly IConfiguration _config;
        private readonly PostgresService _dbConnector;
        private readonly KATORepository _katoRep;
        private readonly TradePointsRepository _tradePointsRep;

        public MyJob(IConfiguration config, PostgresService dbConnector, KATORepository katoRep, TradePointsRepository tradePointsRep)
        {
            _config = config;
            _dbConnector = dbConnector;
            _katoRep = katoRep;
            _tradePointsRep = tradePointsRep;
        }

        public async Task Execute(IJobExecutionContext context)
        {
            try
            {
                var connection = _dbConnector.ConnectToDB();
                Log.Information("Loading trade points data");

                var katodict = _katoRep.GetKATORef();
                var atms = _tradePointsRep.GetAtms();
                var branches = _tradePointsRep.GetBranches();

                _dbConnector.TruncateTables();
                _dbConnector.AddKATO(katodict);
                _dbConnector.AddBranches(branches);
                _dbConnector.AddATMs(atms);

                Log.Information("Process finished");
            }
            catch (Exception ex)
            {
                SentrySdk.CaptureException(ex);
                Log.Error(ex, "Error during job execution");
            }

            await Task.CompletedTask;
        }
    }

    public class SingletonJobFactory : IJobFactory
    {
        private readonly IServiceProvider _serviceProvider;

        public SingletonJobFactory(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        public IJob NewJob(TriggerFiredBundle bundle, IScheduler scheduler)
        {
            return _serviceProvider.GetService(bundle.JobDetail.JobType) as IJob;
        }

        public void ReturnJob(IJob job) { }
    }

    public class JobSchedule
    {
        public JobSchedule(Type jobType, string cronExpression)
        {
            JobType = jobType;
            CronExpression = cronExpression;
        }

        public Type JobType { get; }
        public string CronExpression { get; }
    }

    public class QuartzHostedService : IHostedService
    {
        private readonly ISchedulerFactory _schedulerFactory;
        private readonly IJobFactory _jobFactory;
        private readonly IEnumerable<JobSchedule> _jobSchedules;
        private IScheduler _scheduler;

        public QuartzHostedService(
            ISchedulerFactory schedulerFactory,
            IJobFactory jobFactory,
            IEnumerable<JobSchedule> jobSchedules)
        {
            _schedulerFactory = schedulerFactory;
            _jobFactory = jobFactory;
            _jobSchedules = jobSchedules;
        }

        public async Task StartAsync(CancellationToken cancellationToken)
        {
            _scheduler = await _schedulerFactory.GetScheduler(cancellationToken);
            _scheduler.JobFactory = _jobFactory;

            foreach (var jobSchedule in _jobSchedules)
            {
                var job = CreateJob(jobSchedule);
                var trigger = CreateTrigger(jobSchedule);

                await _scheduler.ScheduleJob(job, trigger, cancellationToken);
            }

            await _scheduler.Start(cancellationToken);
        }

        public async Task StopAsync(CancellationToken cancellationToken)
        {
            if (_scheduler != null)
            {
                await _scheduler.Shutdown(cancellationToken);
            }
        }

        private IJobDetail CreateJob(JobSchedule schedule)
        {
            var jobType = schedule.JobType;
            return JobBuilder
                .Create(jobType)
                .WithIdentity(jobType.FullName)
                .WithDescription(jobType.Name)
                .Build();
        }

        private ITrigger CreateTrigger(JobSchedule schedule)
        {
            return TriggerBuilder
                .Create()
                .WithIdentity($"{schedule.JobType.FullName}.trigger")
                .WithCronSchedule(schedule.CronExpression)
                .WithDescription(schedule.CronExpression)
                .Build();
        }
    }
}

// Startup.cs
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Logging;
using System;

public class Startup
{
    private readonly IConfiguration _configuration;

    public Startup(IConfiguration configuration)
    {
        _configuration = configuration;
    }

    public void ConfigureServices(IServiceCollection services)
    {
        services.AddMvc().SetCompatibilityVersion(Microsoft.AspNetCore.Mvc.CompatibilityVersion.Version_2_2);
        services.AddOptions();
        services.AddHealthChecks();
    }

    public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILogger<Startup> logger)
    {
        app.UseMvc(routes =>
        {
            routes.MapRoute(
                name: "default",
                template: "{controller=Home}/{action=Index}/{id?}"
            );
        });

        app.UseHealthChecks("/healthz");
        app.UseRequestLocalization();
    }
}

// HealthzController.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

namespace TradePointsLoader.Controllers
{
    [ApiController]
    [Route("healthz")]
    public class HealthzController : ControllerBase
    {
        private readonly ILogger<HealthzController> _logger;

        public HealthzController(ILogger<HealthzController> logger)
        {
            _logger = logger;
        }

        [HttpGet]
        public IActionResult GetHealthz()
        {
            return new OkObjectResult("OK");
        }
    }
}
