System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection. (Parameter 'index')
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at ASTS_BRIDGE.Models.Decoder.ReadTable(Int32* ptr, Int32*& newPtr, Int32 sdvig, Int32& newSdvig, String nameTable, List`1 tables) in C:\Users\00058157\RiderProjects\ASTS\kase-asts-read-tables\ASTS BRIDGE\Models\Decoder.cs:line 374
   at ASTS_BRIDGE.Models.Server.OpenTableNonString(String name, String par, Int32& descriptor) in C:\Users\00058157\RiderProjects\ASTS\kase-asts-read-tables\ASTS BRIDGE\Models\Server.cs:line 274
   at ASTS_BRIDGE.Models.Server.GetSecurity(String[] Boards, String KafkaTopic, Boolean isDailyReport) in C:\Users\00058157\RiderProjects\ASTS\kase-asts-read-tables\ASTS BRIDGE\Models\Server.cs:line 331
   at ASTS_BRIDGE.Models.Server.GetUpdates() in C:\Users\00058157\RiderProjects\ASTS\kase-asts-read-tables\ASTS BRIDGE\Models\Server.cs:line 368
   at System.Threading.Thread.StartCallback()

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace ASTS_BRIDGE.Models
{
    public class Decoder
    {
        public static unsafe int GetInt(int* ptr, out int* newPtr, int sdvig)
        {
            int[] stringLength = new int[1];

            Marshal.Copy(IntPtr.Add(new IntPtr(ptr), sdvig), stringLength, 0, 1);

            int length = stringLength[0];

            ptr += 1; // shift to the int length / сдвигаем на длинну длинны инта
            newPtr = ptr;

            return length;
        }

        public static unsafe int GetIntFromByte(int* ptr, out int* newPtr, int sdvig, out int newSdvig)
        {
            byte[] stringLength = new byte[1];

            Marshal.Copy(IntPtr.Add(new IntPtr(ptr), sdvig), stringLength, 0, 1);

            int length = stringLength[0];
            sdvig += 1; // shift/ сдвигаем 

            while (sdvig >= 4)
            {
                sdvig -= 4;
                ptr += 1;
            }

            newSdvig = sdvig;
            newPtr = ptr;

            return length;
        }

        public static unsafe string GetString(int* ptr, out int* newPtr, int sdvig, out int newSdvig)
        {
            int[] stringLength = new int[1];
            Marshal.Copy(IntPtr.Add(new IntPtr(ptr), sdvig), stringLength, 0, 1);

            int length = stringLength[0];

            ptr += 1; // shift to the int length / сдвигаем на длинну длинны инта

            string result = Marshal.PtrToStringAnsi(IntPtr.Add(new IntPtr(ptr), sdvig), stringLength[0]);

            while (length % 4 != 0)
            {
                length--;
                sdvig++;
            }

            while (sdvig >= 4)
            {
                sdvig -= 4;
                ptr += 1;
            }

            ptr += length / 4;

            newSdvig = sdvig;

            newPtr = ptr;

            return result;
        }

        public static unsafe string GetStringWhenWeKnownLength(int* ptr, out int* newPtr, int sdvig, out int newSdvig, int length)
        {
            string result;

            if (sdvig == 0)
            {
                result = Marshal.PtrToStringAnsi(new IntPtr(ptr), length);
            }
            else
            {
                result = Marshal.PtrToStringAnsi(IntPtr.Add(new IntPtr(ptr), sdvig), length);
            }

            while (length % 4 != 0)
            {
                length--;
                sdvig++;
            }

            while (sdvig >= 4)
            {
                sdvig -= 4;
                ptr += 1;
            }

            ptr += length / 4;

            newSdvig = sdvig;

            newPtr = ptr;

            return result;
        }

        public static unsafe AstsEnumType GetOneType(int* ptr, out int* newPtr, int sdvig, out int newSdvig)
        {
            AstsEnumType type = new AstsEnumType();

            type.Name = GetString(ptr, out ptr, sdvig, out sdvig);
            type.Header = GetString(ptr, out ptr, sdvig, out sdvig);
            type.Description = GetString(ptr, out ptr, sdvig, out sdvig);
            type.Lenght = GetInt(ptr, out ptr, sdvig);

            int numType = GetInt(ptr, out ptr, sdvig);
            if (numType == 0)
            {
                type.Type = AstsEnumKind.EkCheck;
            }
            else if (numType == 1)
            {
                type.Type = AstsEnumKind.EkGroup;
            }
            else if (numType == 2)
            {
                type.Type = AstsEnumKind.EkCombo;
            }

            int constCount = GetInt(ptr, out ptr, sdvig);

            type.Consts = new List<AstsEnumConst>();

            for (int i = 0; i < constCount; i++)
            {
                AstsEnumConst newConst = new AstsEnumConst();
                newConst.Value = GetString(ptr, out ptr, sdvig, out sdvig);
                newConst.LongDescription = GetString(ptr, out ptr, sdvig, out sdvig);
                newConst.ShorDescription = GetString(ptr, out ptr, sdvig, out sdvig);

                type.Consts.Add(newConst);
            }

            newPtr = ptr;
            newSdvig = sdvig;
            return type;
        }

        public static unsafe List<AstsEnumType> GetAllTypes(int* ptr, out int* newPtr, int sdvig, out int newSdvig)
        {
            GetInt(ptr, out ptr, sdvig);
            int typesCount = GetInt(ptr, out ptr, sdvig);

            List<AstsEnumType> types = new List<AstsEnumType>();

            for (int i = 0; i < typesCount; i++)
            {
                types.Add(GetOneType(ptr, out ptr, sdvig, out sdvig));
            }

            newPtr = ptr;
            newSdvig = sdvig;
            return types;
        }

        public static unsafe List<AstsTable> GetAllTables(int* ptr, out int* newPtr, int sdvig, out int newSdvig)
        {
            int tableCount = GetInt(ptr, out ptr, sdvig);

            List<AstsTable> tables = new List<AstsTable>();

            for (int i = 0; i < tableCount; i++)
            {
                tables.Add(GetOneTable(ptr, out ptr, sdvig, out sdvig));
            }

            newPtr = ptr;
            newSdvig = sdvig;
            return tables;
        }

        public static unsafe AstsTable GetOneTable(int* ptr, out int* newPtr, int sdvig, out int newSdvig)
        {
            AstsTable table = new AstsTable();

            table.Name = GetString(ptr, out ptr, sdvig, out sdvig);
            table.Header = GetString(ptr, out ptr, sdvig, out sdvig);
            table.Description = GetString(ptr, out ptr, sdvig, out sdvig);
            table.IndexInSystem = GetInt(ptr, out ptr, sdvig);

            int numType = GetInt(ptr, out ptr, sdvig);
            if (numType == 1)
            {
                table.Flag = AstsTableFlags.TfUpdateable;
            }
            else if (numType == 2)
            {
                table.Flag = AstsTableFlags.TfClearOnUpdate;
            }
            else if (numType == 4)
            {
                table.Flag = AstsTableFlags.TfOrderbook;
            }

            table.FieldsIn = GetTableFields(ptr, out ptr, sdvig, out sdvig, true);
            table.FieldsOut = GetTableFields(ptr, out ptr, sdvig, out sdvig, false);

            newPtr = ptr;
            newSdvig = sdvig;
            return table;
        }

        public static unsafe List<AstsTableField> GetTableFields(int* ptr, out int* newPtr, int sdvig, out int newSdvig, bool neadDefoltValue)
        {

            int count = GetInt(ptr, out ptr, sdvig);

            List<AstsTableField> fields = new List<AstsTableField>();

            for (int i = 0; i < count; i++)
            {
                AstsTableField field = new AstsTableField();
                field.Name = GetString(ptr, out ptr, sdvig, out sdvig);

                field.Header = GetString(ptr, out ptr, sdvig, out sdvig);
                field.Description = GetString(ptr, out ptr, sdvig, out sdvig);

                field.Lenght = GetInt(ptr, out ptr, sdvig);

                int type = GetInt(ptr, out ptr, sdvig);

                if (type == 0)
                {
                    field.FieldType = AstsTableFieldType.FtChar;
                }
                else if (type == 1)
                {
                    field.FieldType = AstsTableFieldType.FtInteger;
                }
                else if (type == 2)
                {
                    field.FieldType = AstsTableFieldType.FtFixed;
                }
                else if (type == 3)
                {
                    field.FieldType = AstsTableFieldType.FtFloat;
                }
                else if (type == 4)
                {
                    field.FieldType = AstsTableFieldType.FtDate;
                }
                else if (type == 5)
                {
                    field.FieldType = AstsTableFieldType.FtTime;
                }
                else if (type == 6)
                {
                    field.FieldType = AstsTableFieldType.FtFloatPoint;
                }
                field.CountDecimal = GetInt(ptr, out ptr, sdvig);

                int atribute = GetInt(ptr, out ptr, sdvig);

                if (atribute == 1)
                {
                    field.FieldFlag = AstsTableFieldFlags.FfKey;
                }
                if (atribute == 2)
                {
                    field.FieldFlag = AstsTableFieldFlags.FfSecCode;
                }
                if (atribute == 4)
                {
                    field.FieldFlag = AstsTableFieldFlags.FfNotNull;
                }
                if (atribute == 8)
                {
                    field.FieldFlag = AstsTableFieldFlags.FfVarBlock;
                }
                field.TypeEnums = GetString(ptr, out ptr, sdvig, out sdvig);

                if (neadDefoltValue)
                {
                    field.DefoltValue = GetString(ptr, out ptr, sdvig, out sdvig);
                }
                fields.Add(field);
            }


            newPtr = ptr;
            newSdvig = sdvig;
            return fields;
        }

        public static unsafe List<AstsTransaction> GetAllTrans(int* ptr, out int* newPtr, int sdvig, out int newSdvig)
        {
            int count = GetInt(ptr, out ptr, sdvig);

            List<AstsTransaction> transactions = new List<AstsTransaction>();

            for (int i = 0; i < count; i++)
            {
                transactions.Add(GetOneTrans(ptr, out ptr, sdvig, out sdvig));
            }

            newPtr = ptr;
            newSdvig = sdvig;
            return transactions;
        }

        public static unsafe AstsTransaction GetOneTrans(int* ptr, out int* newPtr, int sdvig, out int newSdvig)
        {
            AstsTransaction type = new AstsTransaction();

            type.Name = GetString(ptr, out ptr, sdvig, out sdvig);
            type.Header = GetString(ptr, out ptr, sdvig, out sdvig);
            type.Description = GetString(ptr, out ptr, sdvig, out sdvig);
            type.IndexInSystem = GetInt(ptr, out ptr, sdvig);

            type.Fields = GetTableFields(ptr, out ptr, sdvig, out sdvig, true);

            newPtr = ptr;
            newSdvig = sdvig;
            return type;
        }

        public static unsafe UniversalTable ReadTable(int* ptr, out int* newPtr, int sdvig, out int newSdvig, string nameTable, List<AstsTable> tables)
        {
            string lines = new string('-', 230);
            AstsTable tableStruct = new AstsTable();

            foreach (var item in tables)
            {
                if (item.Name == nameTable)
                {
                    tableStruct = item;
                    break;
                }
            }

            int refOnTable = GetInt(ptr, out ptr, sdvig);

            UniversalTable table = new UniversalTable(tableStruct.Name);

            table.Ref = refOnTable;

            int integ = GetInt(ptr, out ptr, sdvig);
            int countRow = 0;

            countRow = GetInt(ptr, out ptr, sdvig);

            for (int i = 0; i < countRow; i++)
            {
                int fieldCount = GetIntFromByte(ptr, out ptr, sdvig, out sdvig);
                int dataLength = GetInt(ptr, out ptr, sdvig);

                List<AstsTableField> fields = new List<AstsTableField>();

                if (fieldCount == 0)
                {
                    fields = tableStruct.FieldsOut;
                    fieldCount = fields.Count();
                }
                else
                {
                    for (int i2 = 0; i2 < fieldCount; i2++)
                    {
                        fields.Add(tableStruct.FieldsOut[GetIntFromByte(ptr, out ptr, sdvig, out sdvig)]);
                    }
                }

                UniversalRow row = new UniversalRow();

                for (int i2 = 0; i2 < fields.Count; i2++)
                {
                    AstsTableField field = fields[i2];

                    UniversalField fieldNew = new UniversalField();

                    fieldNew.Name = field.Name;
                    fieldNew.Value = GetStringWhenWeKnownLength(ptr, out ptr, sdvig, out sdvig, field.Lenght);
                    fieldNew.Decimals = field.CountDecimal;
                    row.Fields.Add(fieldNew);
                }

                table.Rows.Add(row);
            }

            newSdvig = sdvig;
            newPtr = ptr;

            return table;
        }
    }
}
