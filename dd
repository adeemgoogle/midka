class Program
{
    private static readonly IConfiguration _config = new ConfigurationBuilder().SetBasePath(AppDomain.CurrentDomain.BaseDirectory).AddJsonFile("appsettings.json").AddEnvironmentVariables().Build();

    static int Main(string[] args)
    {
        //Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture("en-US"); ;

        Log.Logger = new LoggerConfiguration()
            .WriteTo.Console(restrictedToMinimumLevel: LogEventLevel.Debug, formatter: new RenderedCompactJsonFormatter())
            .CreateLogger();

        using (SentrySdk.Init(_config.GetSection("Sentry")["Dsn"]))
        {
            try
            {

                var dbConnector = new PostgresService(_config);
                var connection = dbConnector.ConnectToDB();


                Log.Information("Loading trade points data");

                KATORepository katoRep = new KATORepository(_config);
                var katodict = katoRep.GetKATORef();

                TradePointsRepository tradePointsRep = new TradePointsRepository(_config, katodict);
                var aTMs = tradePointsRep.GetAtms();
                var branches = tradePointsRep.GetBranches();
                dbConnector.AddBranches(branches);
                dbConnector.AddBranchs(branches);
                dbConnector.AddKATO(katodict);
                dbConnector.AddATMs(aTMs);
                dbConnector.AddAtms(aTMs);




                Log.Information("Process finished");
            }
            catch (Exception ex)
            {
                SentrySdk.CaptureException(ex);
                Log.Error(ex, "Process error: ");
                return 1;
            }
        }
        return 0;
    }

}
