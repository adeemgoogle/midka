package services

import (
	"fiber-microservice/internal/models"
	"fmt"
	"math"
	"strconv"
)

func parseFloat(str *string) float64 {
	if str == nil {
		return 0
	}
	val, err := strconv.ParseFloat(*str, 64)
	if err != nil {
		return 0
	}
	return val
}

func calculateAllsumTotal(schedule []models.ScheduleItem) string {
	total := 0.0
	for _, item := range schedule {
		total += parseFloat(item.Allsum)
	}
	total = math.Floor(total*100) / 100
	return fmt.Sprintf("%.2f", total)
}

func calculateRaschetTotal(schedule []models.ScheduleItem) string {
	total := 0.0
	for _, item := range schedule {
		total += parseFloat(item.Raschet)
	}
	total = math.Floor(total*100) / 100
	return fmt.Sprintf("%.2f", total)
}

func calculateDebtTotal(schedule []models.ScheduleItem) string {
	total := 0.0
	for _, item := range schedule {
		total += parseFloat(item.Debt)
	}
	total = math.Floor(total*100) / 100
	return fmt.Sprintf("%.2f", total)
}

func calculateSumSubsTotal(schedule []models.ScheduleItem) string {
	total := 0.0
	for _, item := range schedule {
		total += parseFloat(item.Sumsubs)
	}
	total = math.Floor(total*100) / 100
	return fmt.Sprintf("%.2f", total)
}

func calculateSumCliTotal(schedule []models.ScheduleItem) string {
	total := 0.0
	for _, item := range schedule {
		total += parseFloat(item.Sumcli)
	}
	total = math.Floor(total*100) / 100
	return fmt.Sprintf("%.2f", total)
}

func calculateCreditTotal(schedule []models.ScheduleItem) string {
	total := 0.0
	for _, item := range schedule {
		total += parseFloat(item.Credit)
	}
	total = math.Floor(total*100) / 100
	return fmt.Sprintf("%.2f", total)
}

func calculateOdPcnTotal(schedule []models.ScheduleItem) string {
	total := 0.0
	for _, item := range schedule {
		total += parseFloat(item.Odpcn)
	}
	total = math.Floor(total*100) / 100
	return fmt.Sprintf("%.2f", total)
}

// Главная функция
func CalculateTotals(schedule []models.ScheduleItem) models.ScheduleResponse {
	return models.ScheduleResponse{
		AllsumTotal:  calculateAllsumTotal(schedule),
		RaschetTotal: calculateRaschetTotal(schedule),
		DebtTotal:    calculateDebtTotal(schedule),
		SumSubsTotal: calculateSumSubsTotal(schedule),
		SumCliTotal:  calculateSumCliTotal(schedule),
		CreditTotal:  calculateCreditTotal(schedule),
		OdPcnTotal:   calculateOdPcnTotal(schedule),
	}
}
