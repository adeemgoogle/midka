 public async Task<IEnumerable<Branch>> GetBranchById(string id)
 {
     var query = "select id,  name, type, filial, locality, kato, adress, adress_kaz, location,  currency_exchange_flag, corporate_entity_flag, person_entity_flag, western_union_flag, money_gramm_flag, depository_flag, terminal_flag, premium_zone_flag, all_day_flag from branch where id = @id";
     var row = await GetBranchRow(query, new NpgsqlParameter("id", id));
     if (row == null)
     {
         return null;
     }
     return row;
 }
 private async Task<IEnumerable<Branch>> GetBranchRow(string query, params NpgsqlParameter[] parameters)
 {
     var branches = new List<Branch>();

     using (var cmd = new NpgsqlCommand(query, _connection))
     {
         cmd.Parameters.AddRange(parameters);

         using (var reader = await cmd.ExecuteReaderAsync())
         {
             if (await reader.ReadAsync())
             {
                 var branch = new Branch
                 {
                     Id = reader["id"].ToString(),
                     
                     Name = reader["name"].ToString(),
                     Type = reader["type"].ToString(),
                     Filial = reader["filial"].ToString(),
                     Locality = reader["locality"].ToString(),
                     KatoCode = reader["kato"].ToString(),
                     Adress = reader["adress"].ToString(),
                     AdressKaz = reader["adress_kaz"].ToString(),
                     Location = reader["location"].ToString(),
                     CurrencyExchangeFlag = reader["currency_exchange_flag"] as bool? ?? false,
                     CorporateEntityFlag = reader["corporate_entity_flag"] as bool? ?? false,
                     PersonEntityFlag = reader["person_entity_flag"] as bool? ?? false,
                     WesternUnionFlag = reader["western_union_flag"] as bool? ?? false,
                     MoneyGrammFlag = reader["money_gramm_flag"] as bool? ?? false,
                     DepositoryFlag = reader["depository_flag"] as bool? ?? false,
                     TerminalFlag = reader["terminal_flag"] as bool? ?? false,
                     PremiumZoneFlag = reader["premium_zone_flag"] as bool? ?? false,
                     AllDayFlag = reader["allday_flag"] as bool? ?? false,
                     Embosser = reader["embosser"] as bool? ?? false,
                     
                 };
                 branches.Add(branch);
             }

         }

     }
     return branches;
 }

fix "extensions": {
                "code": "INDEX_OUT_OF_RANGE"
